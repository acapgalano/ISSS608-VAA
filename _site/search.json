[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "ISSS608-VAAProfessorStudent\n\n\nIn this competitive global environment, the ability to explore visual representation of business data interactively and to detect meaningful patterns, trends and exceptions from these data are increasingly becoming an important skill for data analysts and business practitioners. Drawing from research and practice on Data Visualisation, Human-Computer Interaction, Data Analytics, Data Mining and Usability Engineering, this course aims to share with you how visual analytics techniques can be used to interact with data from various sources and formats, explore relationship, '''detect the expected and discover the unexpected''' without having to deal with complex statistical formulas and programming.\nThe goals of this course are:\n\nTo share with you the principles, best practices and methods of visual analytics\nTo provide you hands-on experiences in using commercial-off-the-shelf visual analytics software and programming tools to design visual analytics applications\n\n\n\n\n\n\n\n\nKAM Tin Seong\nFull-time Faculty\nAssociate Professor of Information Systems (Practice)\n\nQualification\n\nPhD, University of London, 1995\n\n\n\nTeaching Topics\n\nComputer as an Analysis Tool\nGeospatial Analytics for Business Intelligence\nGuided Research in Information Systems\nVisual Analytics for Business Intelligence\nData Analytics Lab\n\n\n\n\n\nAnica Clarice Antonella Pascual Galano"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "",
    "text": "This is a hands-on exercise following this guide as a requirement under the class ISSS608: Visual Analytics and Applications.\n\n\n\nImage taken from Intro R Workshop (ajsmit)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#installing-and-loading-required-packages",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#installing-and-loading-required-packages",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Installing and Loading Required Packages",
    "text": "Installing and Loading Required Packages\nThe function p_load() from pacman checks if inputted packages are already installed. If they are, they are loaded into the R environment. Otherwise, they are installed then loaded in. The code chunk below runs p_load() for tidyverse.\n\n\nPress to toggle code\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-the-data",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Importing the Data",
    "text": "Importing the Data\nThe code chunk below uses read.csv() to load in the CSV file ‚ÄúExam_data.csv‚Äù into the R environment.\n\n\nPress to toggle code\nexam_data <- read.csv('data/Exam_data.csv')\n\n\n\nExamining the data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#base-r-graphics-vs.-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#base-r-graphics-vs.-ggplot2",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Base R Graphics vs.¬†ggplot2",
    "text": "Base R Graphics vs.¬†ggplot2\n\n\nPress to toggle code\nhist(exam_data$MATHS, col ='#e3879e')\n\n\n\n\n\n\n\n\n\n\n\nPress to toggle code\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#e3879e\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#exploring-geometric-objects",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#exploring-geometric-objects",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Exploring Geometric Objects",
    "text": "Exploring Geometric Objects\nGeometric objects refer to the actual marks placed on the plot. A plot must contain at least one geometric object in order to have an output. There‚Äôs no limit on the number of geometric objects, all you need to do is add them to the plot using +. The image below contains samples of geometric objects and their visualizations.\n\n\n\n\n\n\nBar Plot - geom_bar()\nThe code chunk below uses the geometric object geom_bar() which produces a bar plot of the frequencies of the variable ‚ÄòRACE‚Äô as specified by aes(x = RACE).\n\n\nPress to toggle code\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar(fill = '#e3879e')\n\n\n\n\n\n\n\n\n\n\n\nDot Plot - geom_dotplot()\nThe code chunk below makes use of the geometric object geom_dotplot() which produces a dot plot of the variable ‚ÄòMATHS‚Äô, which refers to math scores.\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5,         \n               dotsize = 0.5,\n               fill = '#e3879e') +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\nAs you can see geom_dotplot() makes use of two arguments, ‚Äòbinwidth‚Äô which refers to group ranges and ‚Äòdotsize‚Äô which scales the size of the dots. The function scale_y_continuous() is also added to turn off the y-axis by setting to NULL.\n\n\nHistogram - geom_histogram()\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 color=\"black\",      \n                 fill=\"#e3879e\")  \n\n\n\n\n\n\n\n\n\n\nModifying a geometric object by changing ‚Äôaes()‚Äô\n\n\nPress to toggle code\nggplot(data=exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\") +\n  scale_fill_manual(values = c(\"#e3879e\",\"#af7cb6\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüí°ADDITIONAL NOTES\n\n\n\nYou can set specific fill colors using scale_fill_manual(). Just input your vector of colors in the ‚Äòvalues‚Äô argument.\n\n\n\n\n\nKernel Density Estimation - geom_density()\n\n\nPress to toggle code\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\nBox Plot - geom_boxplot()\n\n\nPress to toggle code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\nCombining geometric objects\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() +              #<<      \n  geom_point(position=\"jitter\", #<<\n             size = 0.5)        #<<\n\n\n\n\n\n\n\n\n\n\n\nWorking with stat_summary()\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y = \"mean\",         \n               colour = \"red\",        \n               size=4)               \n\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\n‚Ñπ Please use the `fun` argument instead.\n\n\n\n\n\n\n\n\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(y = MATHS, x =  GENDER)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",        \n             fun.y =\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n\nScatter Plot - geom_point()\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\nGetting the best fit curve on a scatter plot\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5)\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n‚Ñπ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-facets",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-facets",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Working with Facets",
    "text": "Working with Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data.\nFacets are an alternative to aesthetics for displaying additional discrete variables."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#using-facet-wrap",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#using-facet-wrap",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Using facet-wrap()",
    "text": "Using facet-wrap()\nThe code chunk below produces a 2D matrix of ‚ÄòMATHS‚Äô histograms as grouped by variable ‚ÄòCLASS‚Äô using facet_wrap(~ CLASS) .\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüíª CODE REVIEW!\n\n\n\nThe function facet_wrap() takes in the argument ‚Äòfacets‚Äô which pertains to the facet groups. The documentation states that it can accept either formulas or character vectors.\nThe operator ~ is used to define the relationship between dependent variable and independent variables in a formula; it separates the lefthand side and righthand side. The argument ‚Äòfacets‚Äô accepts formulas, and by using the code snippet ~ CLASS we are defining a one-sided formula."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#using-facet_grid",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#using-facet_grid",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Using facet_grid()",
    "text": "Using facet_grid()\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\nHow do we create a trellis box plot of math scores per class grouped by gender?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER)\n\n\n\n\n\n\n\n\n\n\nHow do we put one panel on top of the other?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER, nrow = 2, strip.position = \"right\")\n\n\n\n\n\n\n\n\n\nThe argument ‚Äòstrip.position‚Äô sets the position of the facet group‚Äôs strip label.\n\nHow do we group by both ‚ÄòCLASS‚Äô and ‚ÄòGENDER‚Äô?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() + \n  facet_grid(GENDER ~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-coordinates",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Working with Coordinates",
    "text": "Working with Coordinates"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-themes",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-themes",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Working with Themes",
    "text": "Working with Themes\n\nHow do you create a horizontal bar graph with a light blue background?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n   theme(panel.background = element_rect(fill = \"lightblue\",\n                                         color = \"white\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#designing-data-drive-graphics-for-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#designing-data-drive-graphics-for-analysis",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Designing Data-drive Graphics for Analysis",
    "text": "Designing Data-drive Graphics for Analysis\n\nHow do you improve a normal bar chart?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() \n\n\n\n\n\n\n\n\n\n\nHow do we add mean and median lines on the histogram plot and change fill colors?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 color = \"black\",      \n                 fill = \"lightblue\") +\n  geom_vline(aes(xintercept = mean(MATHS)),\n             col = 'red',\n             size = 0.5,\n             linetype = \"dashed\")+ \n  geom_vline(aes(xintercept = median(MATHS)),\n             col = 'black',\n             size = 0.5,\n             linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\n\nHow do you have a histogram show the distribution of English scores for all pupils in the background?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = ENGLISH,\n           fill = GENDER)) +\n  geom_histogram(bins = 20,\n                 color = \"black\") + \n  facet_wrap(~ GENDER)\n\n\n\n\n\n\n\n\n\n\nHow to create a scatter plot with reference lines?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() + \n  geom_vline(aes(xintercept = 50),\n             col = 'grey',\n             size = 0.8,\n             linetype = \"dashed\") + \n  geom_hline(aes(yintercept = 50),\n             col = 'grey',\n             size = 0.8,\n             linetype = \"dashed\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "title": "In-class Exercise 2: Creating Eelegant Graphics with ggplot2",
    "section": "",
    "text": "This document serves as my In-class Exercise 2 requirement, following the second week of ISSS608 VAA lecture of Professor Kam on January 21, 2023.\n\n\nTidyverse is a collection of packages that (as named) is used to tidy data in the field of data analytics. The tidyverse packages and workflow are shown below.\n\n\n\nFigure taken from [Hands-on Exercise 1 slides of ISSS608 course page](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01-ggplot2#/4)\n\n\nIn this In-class Exercise, we make use of tidyverse, especially the included package ggplot2 to explore the different graphics that can be designed and how they can be customized.\n\n\n\nThe data consists of exam scores of students from different classes for different subjects, namely,"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#loading-the-required-packages",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#loading-the-required-packages",
    "title": "In-class Exercise 2: Creating Eelegant Graphics with ggplot2",
    "section": "Loading the required packages",
    "text": "Loading the required packages\nThe function p_load() from pacman checks if inputted packages are already installed. If they are, they are loaded into the R environment. Otherwise, they are installed then loaded in. The code chunk below runs p_load() for tidyverse.\n\n\nPress to toggle code\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\n\nüíª CODE REVIEW!\n\n\n\n\nWhy do we"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-the-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-the-data",
    "title": "In-class Exercise 2: Creating Eelegant Graphics with ggplot2",
    "section": "Importing the data",
    "text": "Importing the data\nThe code chunk below uses read.csv() to load in the CSV file ‚ÄúExam_data.csv‚Äù into the R environment.\n\n\nPress to toggle code\nexam_data <- read.csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "title": "In-class Exercise 3 - Interactive Data Visualisation",
    "section": "",
    "text": "This document serves as my In-class Exercise 3 requirement, following the second week of ISSS608 VAA lecture of Professor Kam on January 28, 2023.\n\n\nThis in-class exercise aims to add interactivity to our visualizations."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#tableau",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#tableau",
    "title": "In-class Exercise 3 - Interactive Data Visualisation",
    "section": "Tableau",
    "text": "Tableau\n\nSuperstore Data\nThis section builds on the Tableau workbook from In-class Exercise 1.\n\nFilters\nBy dragging Order Date to Filters, we can filter the data by date, particularly by year. By making the filter a single list, we end up with the output below.\n\n\n\n\n\n\n\nAdding a graph to tooltip\nBy editing the Tooltip function, you can add a sheet (or graph) to the tooltip. Adding the line <Sheet name=\"Annual Sales vs. Profit\" maxwidth=\"300\" maxheight=\"300\" filter=\"<All Fields>\"> and hovering over a point will produce the tooltip shown below.\n\n\n\n\n\nThe output dashboard is embedded below. It can also be found on Tableau Public here.\n\n                   \n\n\n\nExam Data\nThe data consists of exam scores of students for English and Maths.\n\nCreate base graphs\nBefore creating the goal dashboard, we need to prepare two boxplots (one for English, one for Maths) and a scatterplot (English vs.¬†Maths). They are created by using the ID as Detail. The Maths boxplot will reverse the rows and columns.\n\n\nUsing actions on dashboards\nTableau allows us to add Actions to dashboards. One useful action in particular is Highlight, which highlights certain points, and grays out the rest.\n\n\n\n\n\nThe highlighting output should look like the screenshot below.\n\n\n\n\n\nThe output dashboard is embedded below. It can also be found on Tableau Public here."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#r",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#r",
    "title": "In-class Exercise 3 - Interactive Data Visualisation",
    "section": "R",
    "text": "R\n\nGetting Started\n\nInstalling and loading R packages\nThe code chunk below installs and loads the packages ggiraph and tidyverse into the R environment.\n\n\nPress to toggle code\npacman::p_load(ggiraph, tidyverse)\n\n\n\n\n\nImporting the data\nThe code chunk below imports the CSV file ‚ÄúExam_data.csv‚Äù into the R environment as a tibble.\n\n\nPress to toggle code\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\n\nCreating graphs using ggplot2\n\nStatic geom_dotplot()\n\n\nPress to toggle code\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5, \n               fill = '#e3879e')\n\n\n\n\n\n\n\n\n\n\n\nInteractive geom_dotplot_interactive()\nBy using the code chunk below, we can create the same graph from above with the addition of a tooltip. Hovering over points will output the student ID as well.\n\n\nPress to toggle code\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\",\n    fill = '#e3879e') +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html",
    "title": "In-class Exercise 4: Interactivity and Statistical Analysis",
    "section": "",
    "text": "This document serves as my In-class Exercise 4 requirement, following the fourth week of ISSS608 VAA lecture of Professor Kam on February 4, 2023."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#getting-started",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#getting-started",
    "title": "In-class Exercise 4: Interactivity and Statistical Analysis",
    "section": "üå± Getting Started",
    "text": "üå± Getting Started\n\nInstalling packages into the R environment\n\n\nPress to toggle code\npacman::p_load(ggiraph, plotly, DT, patchwork, crosstalk, ggstatsplot, readxl, performance, parameters, see, ggdist, tidyverse)\n\n\n\n\nLoading the data into the R environment\n\n\nPress to toggle code\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#exploring-the-plotly-package",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#exploring-the-plotly-package",
    "title": "In-class Exercise 4: Interactivity and Statistical Analysis",
    "section": "üöÄ Exploring the plotly Package",
    "text": "üöÄ Exploring the plotly Package\n\nCreating our first basic plot\n\n\nPress to toggle code\nplot_ly(\n  data = exam_data,\n  x = ~ENGLISH,\n  y = ~MATHS,\n  color = ~RACE\n)\n\n\n\n\n\n\nWe can observe that by default we are given a tooltip containing the pair of ‚ÄòENGLISH‚Äô and ‚ÄòMATHS‚Äô scores. More into interactivity, several functions are provided by the new plot at the top right corner.\n\n\nCreating an alternative ggplot plot with plotly\n\n\nPress to toggle code\np <- ggplot(data = exam_data,\n            aes( x = MATHS,\n                 y = ENGLISH)) + \n  geom_point(dotsize = 1) + \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\n\n\nüéì MORAL OF THE STORY\n\n\n\nUse ggplot if you want to have control over the design, and use plotly for easier and better interactivity. You can still control the design if you use native ggplot objects."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#performing-visual-statistical-analysis",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#performing-visual-statistical-analysis",
    "title": "In-class Exercise 4: Interactivity and Statistical Analysis",
    "section": "üìà Performing Visual Statistical Analysis",
    "text": "üìà Performing Visual Statistical Analysis\n\nUsing ggstatsplot::ggbetweenstats()\n\n\nPress to toggle code\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = MATHS,\n  type = \"p\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\nAs shown above we can observe the sample means represented by the red dot and labelled accordingly. We can also observe that Welch test was also performed with a p-value of 0.53. List of statistical tests can be found here.\n\n\nUsing ggstatsplot::gscatterstats()\n\n\nPress to toggle code\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n)\n\n\n\n\n\n\n\n\n\n\n\nLoading an Excel file into the R environment\n\n\nPress to toggle code\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\", \"data\")\n\n\n\n\nCreating a multiple regression model using lm()\n\n\nPress to toggle code\nmodel <- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nPerforming diagnostic tests\n\nChecking for multicolinearity\n\n\nPress to toggle code\ncheck_collinearity(model)\n\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Guarantee_Period  1.04   [1.01, 1.17]         1.02      0.97     [0.86, 0.99]\n        Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n         Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\nHigh Correlation\n\n   Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n     KM 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n Weight 1.41 [1.32, 1.51]         1.19      0.71     [0.66, 0.76]\n\n\n\n\nPress to toggle code\ncheck_c <- check_collinearity(model)\n\nplot(check_c)\n\n\n\n\n\n\n\n\n\nAny VIF over 10, means that there are variables that are highly collinear.\n\n\nChecking normaliy assumption\n\n\nPress to toggle code\ncheck_n <- check_normality(model)\n\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\n\nChecking EVERYTHING in one go\n\n\nPress to toggle code\ncheck_model(model)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#visualizing-uncertainty",
    "href": "In-class_Ex/In-class_Ex4/In-class_Ex4.html#visualizing-uncertainty",
    "title": "In-class Exercise 4: Interactivity and Statistical Analysis",
    "section": "‚ùì Visualizing Uncertainty",
    "text": "‚ùì Visualizing Uncertainty\n\nVisualizing the uncertainty of point estimates\n\n\nPress to toggle code\nmy_sum <- exam_data %>% \n  group_by(RACE) %>%\n  summarise(\n    n = n(),\n    mean = mean(MATHS),\n    sd = sd(MATHS)\n    ) %>%\n  mutate(se = sd/sqrt(n-1))\n\n\n\nUsing ggplot\n\n\nPress to toggle code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x = RACE, \n        ymin = mean-se, \n        ymax = mean+se), \n    width = 0.2, \n    colour = \"black\", \n    alpha = 0.9, \n    size = 0.5) +\n  geom_point(aes\n           (x = RACE, \n            y = mean), \n           stat = \"identity\", \n           color = \"red\",\n           size = 1.5,\n           alpha = 1) +\n  ggtitle(\"Standard error of MEAN MATHS score by RACE\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüîç OBSERVATION\n\n\n\nThere was no need to mention exam_data in the code block above because all the data is already in my_sum."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html",
    "title": "In-class Exercise 5: Multivariate Methods",
    "section": "",
    "text": "This document serves as my In-class Exercise 5 requirement, following the fourth week of ISSS608 VAA lecture of Professor Kam on February 11, 2023."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#getting-started",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#getting-started",
    "title": "In-class Exercise 5: Multivariate Methods",
    "section": "üå± Getting Started",
    "text": "üå± Getting Started\n\nLoading the required packages into the R environment\n\n\nPress to toggle code\npacman::p_load(seriation, dendextend, heatmaply, ggtern, plotly, corrplot, ggstatsplot, tidyverse)\n\n\n\n\nLoading the data into the R environment\nFor the first part of our in-class exercise exploring ways to build correlation matrices, we use the following wine_quality.csv dataset.\n\n\nPress to toggle code\nwine <- read_csv(\"data/wine_quality.csv\")\n\n\nFor the second part of this in-class exercise on ternary diagrams, we used a modified Singapore population dataset called respopagsex2000to2018_tidy.csv.\n\n\nPress to toggle code\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\")\n\n\nFor the third part of this exercise about heatmaps, we use the World Happiness index data from 2018 under the filename WHData-2018.csv.\n\n\nPress to toggle code\nwh <- read_csv(\"data/WHData-2018.csv\")\n\n\n\n\nPreparing the data\n\nPreparing the population data\nTo create three new columns ‚ÄòYOUNG‚Äô, ‚ÄòACTIVE‚Äô and ‚ÄòOLD‚Äô (technically 4 to include ‚ÄòTOTAL‚Äô) and drop the unnecessary columns, we use the code chunk below.\n\n\nPress to toggle code\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%\n  spread(AG, Population) %>%\n  mutate(YOUNG = rowSums(.[4:8]))%>%\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0) %>%\n  select(PA, SZ, YOUNG, ACTIVE, OLD, TOTAL)\n\n\n\n\n\n\n\n\nüóØÔ∏è HOLD IT!\n\n\n\nThe function spread() is an old function that shouldn‚Äôt be used anymore. The function pivot_wider() should be used instead.\n\n\n\n\nPreparing the world happiness data\nThe code chunk below sets the country names as the row ID. This is important for the matrix that will be made later.\n\n\nPress to toggle code\nrow.names(wh) <- wh$Country"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#building-correlation-matrix",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#building-correlation-matrix",
    "title": "In-class Exercise 5: Multivariate Methods",
    "section": "üî® Building Correlation Matrix",
    "text": "üî® Building Correlation Matrix\n\nBuilding a basic correlation matrix using pairs()\n\n\nPress to toggle code\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\n\nTo include the correlation coefficients, we use the code chunk below.\n\n\nPress to toggle code\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\n\n\n\n\n\n\nBuilding a correlation matrix using ggcormat()\n\n\nPress to toggle code\nggstatsplot::ggcorrmat(data = wine, \n                       cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\n\n\n\n\nüå∏ PERSONAL COMMENT!\n\n\n\nDue to a conflict with the ggtern, I set ‚Äòeval‚Äô to false to render the page.\n\n\n\n\nBuilding multiple plots using grouped_ggcorrmat()\n\n\nPress to toggle code\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\n\n\nBuilding a correlation matrix using corrplot()\n\n\nPress to toggle code\nwine.cor <- cor(wine[, 1:11])\n\ncorrplot(wine.cor)\n\n\n\n\n\n\nCreating a mixed plot (numerical and geometric)\n\n\nPress to toggle code\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\nCombining with significance test\n\n\nPress to toggle code\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\n\nReordering the corrgram\n\n\nPress to toggle code\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\n\nPress to toggle code\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#ternary-diagrams",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#ternary-diagrams",
    "title": "In-class Exercise 5: Multivariate Methods",
    "section": "üñß Ternary Diagrams",
    "text": "üñß Ternary Diagrams\n\nBuilding a static ternary diagram\n\n\nPress to toggle code\nggtern(data = agpop_mutated,\n       aes(x = YOUNG,\n           y = ACTIVE, \n           z = OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nTo improve on the visualization, we add theme_rgbw() which colorizes the variables.\n\n\nPress to toggle code\nggtern(data = agpop_mutated, \n       aes(x = YOUNG,y = ACTIVE, z = OLD)) +\n  geom_point() +\n  labs(title = \"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\n\nBuilding an interactive ternary diagram using plot_ly\n\n\nPress to toggle code\nlabel <- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", \n                size = 15, \n                color = \"white\"),\n    bgcolor = \"#b3b3b3\", \n    bordercolor = \"black\", \n    borderwidth = 2\n  )\n}\n\naxis <- function(txt) {\n  list(\n    title = txt, \n    tickformat = \".0%\", \n    tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = list(title = \"Young\", \n               color = \"red\"), \n  baxis = list(title = \"Active\", \n               color = \"blue\"), \n  caxis = list(title = \"Old\", \n               color  = \"green\")\n)\n\nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %>%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nü§© FUN STUFF!\n\n\n\nSomeone asked if we could combine the themed ggtern plot with the interactivity of plot_ly and it was discuss this is not possible. However, after studying the documentation, I found that we can format the different elements in the plot under layout(). Specifically, I modified the original code under ternaryAxes to be a list of arguments which include color. There are also other arguments that allow other formatting specifications. Documentation can be found here: Layout.ternary in R (plotly.com)."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#heatmaps",
    "href": "In-class_Ex/In-class_Ex5/In-class_Ex5.html#heatmaps",
    "title": "In-class Exercise 5: Multivariate Methods",
    "section": "üî• Heatmaps",
    "text": "üî• Heatmaps\n\nTransforming the data frame into a matrix\n\n\nPress to toggle code\nwh1 <- dplyr::select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh)\n\n\n\n\nBuilding a static heatmap\n\n\nPress to toggle code\nwh_heatmap <- heatmap(wh_matrix,\n                      Rowv = NA, Colv = NA)\n\n\n\n\n\n\n\nBuilding an interactive heatmap using heatmaply\n\n\nPress to toggle code\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n\n\nPress to toggle code\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv = NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html",
    "title": "In-class Exercise 6",
    "section": "",
    "text": "This document serves as my In-class Exercise 5 requirement, following the fourth week of ISSS608 VAA lecture of Professor Kam on February 18, 2023.\nBeing able to look at the patterns in data over time is an important aspect of analytics, however, time-series data is often not very visually friendly. For this week‚Äôs exercise, we explore ways of graphing time, visualization of time-series patterns, and adding interactive techniques."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#tableau",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#tableau",
    "title": "In-class Exercise 6",
    "section": "üñºÔ∏è Tableau",
    "text": "üñºÔ∏è Tableau\n\nBasic Time Series\n\n\n\n\n\n\n\nCyclical Plot\n\n\n\n\n\n\n\nCompleting the Arrivals Dashboard\n\n                   \n\n\n\n\n\n\nüí° TABLEAU HACKS!\n\n\n\nTo sync the filters for both worksheets/plots, select ‚ÄúApply to Worksheets‚Äù > ‚ÄúAlly Using This Data Source‚Äù under the filter options.\n\n\n\n\n\n\n\n\n\nCalendar Heatmap\n\n\n\n\n\n\n                   \n\n\nSlopegraph\n\n\n\n\n\n\n\n\n\n\n\nüí° TABLEAU HACKS!\n\n\n\nWe need the ‚ÄòYear‚Äô columns to only contain two particular years, 1961 and 1980. First, we convert to ‚ÄòYear‚Äô to discrete and drag it to Filters. After, choose to filter to only 1961 and 1980. Then we can click Ctrl + drag the ‚ÄòYear‚Äô from Filters to Columns. Ta-da!\n\n\n\n                   \n\n\nAnimated Bubble Plot\n\n\n\n\n\n\n                    \n\n\nüßÆ R\n\n\n\n\n\n\n‚úÖ TIPS FOR TAKE-HOME EXERICSE 4\n\n\n\n\nTo create slope graphs, you may need newggslopegraph under CGPfunctions package.\nA relatively new package called ggbraid can fill the area between lines which will be helpful for deficit graphs."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex7/In-class_Ex7.html",
    "href": "In-class_Ex/In-class_Ex7/In-class_Ex7.html",
    "title": "In-class Exercise 7: Geographic Visualization",
    "section": "",
    "text": "This document serves as my In-class Exercise 5 requirement, following the fourth week of ISSS608 VAA lecture of Professor Kam on February 25, 2023.\nGeospatial data visualization is important since it allows people to easily digest location related information and quickly create insights."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex7/In-class_Ex7.html#tableau",
    "href": "In-class_Ex/In-class_Ex7/In-class_Ex7.html#tableau",
    "title": "In-class Exercise 7: Geographic Visualization",
    "section": "üñºÔ∏è Tableau",
    "text": "üñºÔ∏è Tableau\n\nSGPools (WGS84)\n\nPoint Symbol Map\n\nAssign ‚ÄòXcoord‚Äô and ‚ÄòYcoord‚Äô the ‚ÄúGeographic Role‚Äù longitude and latitude respectively. Put ‚ÄòXcoord‚Äô in as the column, and put ‚ÄòYcoord‚Äô in as the row. A map should appear like as shown below.\n\nNext we drag ‚ÄòName‚Äô to ‚ÄúDetail‚Äù to view the points.\n\nThere‚Äôs a column that dictates whether the location is a branch or outlet using the values 1 and 0. We create a new calculated field named ‚ÄòChannel‚Äô using the logic shown below.\n\nBy setting ‚ÄôChannel as the color indicator, we now have colored points dictating ‚ÄúBranch‚Äù or ‚ÄúOutlet‚Äù.\n\n\n\n\nProportional Symbol Map\n\nFirst we duplicate the previously made sheet.\nThe only difference is we dictate the ‚ÄúSize‚Äù of the points using ‚ÄòGp1Gp2win‚Äô.\n\n\nWe can also combine both sheets‚Äô concepts into one visualization. The result can be found in Tableau Public as In-class Exercise 7: SG Pools (Proportional Point Symbol Map).\n\n                   \n\n\n\nResidential Transactions\n\nOpen one of the Residential Transaction CSVs. This will allow Tableau to also open the folder and add the other files in the explorer. You can then drag the 6 CSVs into the data workspace.\n\nTableau is useful because it recognizes the Postal Code right away.\n\nBy setting the ‚ÄòPostal Code‚Äô as ‚ÄúDetail‚Äù, we produce the map and points below.\n\n\n\n\n\n\n\nüå∏ PERSONAL COMMENTS!\n\n\n\nI encountered an issue where my points were not showing. It also stated I had 6,000+ unknown values. My seatmate also encountered the same issue. However, everyone else did not seem to have the same problem. The common denominator between the two of us with issues was that we are from the Philippines. By pressing the unknown prompt, I saw that our location was set to Philippines therefore the system was unable to identify the postal codes. By setting location to Singapore, we were able to produce the points and fix the issue.\n\n\nNext we set ‚ÄòUnit Price (psf)‚Äô as the ‚ÄúColor‚Äù, particularly using the MEDIAN measure. ‚ÄòNumber of Units‚Äô should be set at the ‚ÄúSize‚Äù. ‚ÄòProject Name‚Äô is set as another ‚ÄúDetail‚Äù. Lastly, we set ‚ÄòProperty Type‚Äô as a ‚ÄúFilter‚Äù. All of this is shown below.\n\n\nThe result can be found in Tableau Public as In-class Exercise 7 - Residential Transactions (Postal Codes).\n\n                    \n\n\nMaster Plan 2019 Subzone Boundaries\n\nLoad in the geojson file Dragging the ‚ÄòGeometry‚Äô field automatically generates the map.\n\nThe issue however is that the details in the geojson are in JSON format. Sure there‚Äôs a way to split it but that will take time. So instead, we make use of the SHP file which has the different subzone names and other details. We can then link the population data to this geospatial data.\n\nTo anticipate the difference in cases for the two subzone columns, we set the relationship calculation to set SZ to uppercase as shown below.\n\nWe get the map shown below.\n\nWe drag ‚ÄòPopulation‚Äô to ‚ÄúColor and ‚ÄòSZ‚Äô to‚ÄùDetail‚Äù to get the simple cholorpleth map below. \nWe can also make the color scale stepped as shown below.\nThe result can be found in Tableau Public as In-class Exercise 7 - MP14SZPop Chloropleth Map."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex7/In-class_Ex7.html#r",
    "href": "In-class_Ex/In-class_Ex7/In-class_Ex7.html#r",
    "title": "In-class Exercise 7: Geographic Visualization",
    "section": "üßÆ R",
    "text": "üßÆ R\n\nGeospatial Point Data\n\n\nPress to toggle code\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\nPress to toggle code\nsgpools <- read_csv(\"data/SGPools_svy21.csv\")\n\n\n\n\nPress to toggle code\nsgpools_sf <- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs = 3414)\n\n\n\n\n\n\n\n\nüñäÔ∏è THINGS TO NOTE!\n\n\n\n\nAlways start with x-coordinates, followed by y-coordinates!\nCountry projections are given a code. For SVY21 (Singapore), the coordinate reference system (CRS) we use will be EPSG 3414.\nRunning st_as_sf() will combine the x-coordinates and y-coordinates as a GEOMETRY object (which is a list).\n\n\n\n\n\nPress to toggle code\ntmap_mode(\"view\")\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"#cb6a82\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\n\n\n\n\nPress to toggle code\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          palette = c(\"#e3879e\",\"#af7cb6\"),\n          border.col = \"black\",\n          border.lwd = 1)\n\n\n\n\n\n\n\n\n\nPress to toggle code\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          palette = c(\"#e3879e\",\"#af7cb6\"),\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChloropleth Map\n\n\nPress to toggle code\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\acapgalano\\ISSS608-VAA\\In-class_Ex\\In-class_Ex7\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nPress to toggle code\npopdata <- read_csv(\"data/respopagesextod2011to2020.csv\")\n\n\n\n\nPress to toggle code\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from = AG, \n              values_from = POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`= rowSums(.[16:21])) %>%\nmutate(`TOTAL`= rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\nPress to toggle code\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\n\n\n\nPress to toggle code\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\n\nPress to toggle code\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")\n\n\n\n\n\n\n\n\nüñäÔ∏è THINGS TO NOTE\n\n\n\n\nThe left-hand side should always be the geospatial data!\n\n\n\n\n\nPress to toggle code\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill.palette = \"PiYG\",\n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\nPress to toggle code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"RdPu\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\nAnalytical Mapping\nyes"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cause It‚Äôs a Visual World, and I Am a Visual Girl ‚úø",
    "section": "",
    "text": "Welcome to my ISSS608 - Visual Analytics and Applications journey!\nIn this website, you‚Äôll find my submissions for the different requirements in ISSS608 - Visual Analytics and Applications.\nBy the end of the semester, I will feel just like the image below. Just kidding!\n\n\n\n\n\n\n\nCheck out the most recent submissions‚Ä¶\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTake-home Exercise 4\n\n\n\n\n\n\nAnica Clarice Antonella P. Galano (acapgalano)\n\n\nFeb 26, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Exercise 7: Geographic Visualization\n\n\n\n\n\n\nAnica Clarice Antonella P. Galano (acapgalano)\n\n\nFeb 25, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Exercise 8 - Modelling, Visualizing and Analysing Network Data with R\n\n\n\n\n\n\nAnica Clarice Antonella P. Galano (acapgalano)\n\n\nFeb 25, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1 - Age-Sex Pyramid",
    "section": "",
    "text": "This document serves as a submission for Take-home Exercise 1 as required by the course ISSS608 Visual Analytics and Applications.\n\n\nHow do we analyze population trends? One common graphical representation is the age-sex pyramid, also known as the population pyramid. It reveals the past and present of one‚Äôs population, and gives an idea of the mortality and fertility rates of a country. In this exercise, we use Tableau to create age-sex pyramids of nine planning areas of Singapore in a single view using a trellis chart.\n\n\n\nFor this exercise, we used the ‚ÄúSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022‚Äù dataset available from the Department of Statistics, Singapore.\n\n\n\nScreenshot of the dataset source from SingStat\n\n\nThe dataset consists of the following data:\n\nPlanning Area (PA)\nSubzone (SZ)\nAge Group (AG)\nSex\nType of Dwelling (TOD)\nPopulation (Pop)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#setting-up-the-trellis-chart",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#setting-up-the-trellis-chart",
    "title": "Take-home Exercise 1 - Age-Sex Pyramid",
    "section": "Setting up the trellis chart",
    "text": "Setting up the trellis chart\nFollowing the guide by Luke Stanke called ‚ÄúTrellis Chart in Tableau‚Äù, we can setup our trellis through the following steps.\n\nSelect Create Calculated field from the Data pane. Create a calculated field called Index and type INDEX() as the calculation.\nCreate a parameter called Total Columns and set it as 3.\n\n\n\n\n\nCreate another calculated field called Column and set it as ([Index] - 1) % [Total Columns] . Similarly, create a calculated field called Row and set it as (([Index] - 1) - [Column]) / [Total Columns]).\nWe should end up with the following measures and parameters.\n\n\n\n\n\n\n\nDrag Column and Row to Columns and Rows respectively. Drag PA and Index to Detail. At this point, we have our skeleton for the trellis chart."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#adding-the-data-and-creating-the-base-pyramid",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#adding-the-data-and-creating-the-base-pyramid",
    "title": "Take-home Exercise 1 - Age-Sex Pyramid",
    "section": "Adding the data and creating the base pyramid",
    "text": "Adding the data and creating the base pyramid\n\nNow to get to the fun part. First we create two more calculated fields: Female set as SUM(IF [Sex] = 'Females' THEN [Pop]END) , and Male set as SUM(IF [Sex] = 'Males' THEN [Pop]END).\nWe then drag these two new fields into Columns. We should get bar graphs similar to figure below.\n\n\n\n\n\n\n\nThat doesn‚Äôt look right! To create the pyramid shape of we‚Äôre familiar with, we need to use Edit Axis on the Male side of the axis and tick ‚ÄúReversed‚Äù under ‚ÄúScale‚Äù as shown below.\n\n\n\n\n\n\nNow we have the right shape! But something is still missing‚Ä¶\n\n\n\n\n\n\nDrag the Sex field into the Color mark to differentiate the male and female bars. In this case, blue and red were used respectively.\n\n\n\n\n\n\n\nNow some planning areas seem to have empty cells. Specifically, by filtering the PA, we find out that there are 14 planning areas with 0 population.\n\n\n\n\n\n\nTo fix this, we drag the PA field into Filter and set the condition as shown in the dialog box below.\n\n\n\n\n\nNow we should have only displayed Age-Sex pyramids for those planning areas with population data."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#other-formatting-specifications",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#other-formatting-specifications",
    "title": "Take-home Exercise 1 - Age-Sex Pyramid",
    "section": "Other formatting specifications",
    "text": "Other formatting specifications\n\nSince we‚Äôre limited by the number of age-sex pyramids seen in one view (without scrolling), it‚Äôs important to display the more relevant planning areas first. In this case, we will be sorting the sizes of the population from greatest to least so the planning areas with the largest population sizes according to the dataset will be shown first.\nTo do this, we sort PA by the Pop field as shown in the screenshot below.\n\n\n\n\n\n\n\nTo limit the number of rows, we can filter Row to be set from 0 to 2.\n\n\n\n\n\n\nAs shown below, the row only goes as far as index = 2, making it a 3x3 trellis chart.\n\n\n\n\n\n\nTo remove the Column and Row headers, we untick Show Header to exclude the column and row numbers.\n\n\n\n\n\n\n\nTo add a label for planning areas, we can right click the lowest bar, and press Annotate \\(\\rightarrow\\) Mark to create a label. Set it as <PA> to display the planning area.\n\n\n\n\n\n\nRemember to remove the Shading and Line to keep the text as is.\n\n\n\n\n\nThe figure below shows the different pyramids labelled with their respective planning areas.\n\n\nTo fix the axis describing the population values, we set the tick marks as shown in the screenshot below.\n\n\n\n\n\n\n\nLast but not the least, we reverse the order of the Age Group values so that it decreases from older to younger.\n\n\n\n\n\n\n\n\nüå∏ PERSONAL COMMENTS\n\n\n\nI almost forgot to do this step, and that‚Äôs why it‚Äôs last in the order. üòÖ\n\n\nThe finished product can be found on Tableau Public. A sample is embedded below, however formatting is affected by the width restrictions of the page. A still image of the dashboard can be found in the next section."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#the-pattern-of-the-population-pyramids",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#the-pattern-of-the-population-pyramids",
    "title": "Take-home Exercise 1 - Age-Sex Pyramid",
    "section": "The pattern of the population pyramids",
    "text": "The pattern of the population pyramids\nWhile each pyramid has slight differences, a recurring observation from each pyramid is that the larger populations are around the middle ages (40-70s). According to National Geographic, this type is called ‚ÄúConstrictive‚Äù and means that these areas have relatively low fertility rates and high life expectancy. The trend states that the population is aging.\nTaking a look at some specific age-sex pyramids, we observe that Punggol has the most unique shape. Since Punggol is relatively newer in the township development aspect, it makes sense that mostly people in their late 30‚Äôs to early 40‚Äôs are moving there. It is reportedly popular for homebuyers, which people in their 20‚Äôs are usually not. With this, it also makes sense that these people are starting their families, therefore younger children are more present than teens and young adults.\nThough on opposite sides of Singapore, Bedok and Jurong West are the closest to having a perfect constrictive shape. Bedok is a mature residential estate and Jurong West is non-mature."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#what-this-means-for-singapore",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#what-this-means-for-singapore",
    "title": "Take-home Exercise 1 - Age-Sex Pyramid",
    "section": "What this means for Singapore",
    "text": "What this means for Singapore\nConstrictive population pyramids are usually a sign of a developed country with high economic development. Good healthcare leads to higher life expectancy and quality education is linked to lower fertility rates. However, with the aging population comes concerns about caring for the elderly and the eventual lack of manpower.\n\n\n\nScreenshot of Singapore population and growth rate from WorldOMeter\n\n\nAs suggested by the pyramids, the growth rate of Singapore is slowing down. This is confirmed by the population and growth rate graphs above. For the population graph, we can see that the curve is slowly flattening out. The growth rate is explicitly dropping since before 2010. Measures may need to be taken to encourage an increase in fertility rates."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "",
    "text": "This document serves as a submission for Take-home Exercise 2 as required by the course ISSS608 Visual Analytics and Applications.\nIn this exercise, we aim to apply the different data visualization design practices and principles and improve on the Take-home Exercise 1 output of a fellow classmate.\n\n\nHow do we analyze population trends? One common graphical representation is the age-sex pyramid, also known as the population pyramid. It reveals the past and present of one‚Äôs population, and gives an idea of the mortality and fertility rates of a country. In this exercise, we used Tableau to create age-sex pyramids of nine planning areas of Singapore in a single view using a trellis chart.\nThe dataset used was ‚ÄúSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022‚Äù, which is available from the Department of Statistics, Singapore."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "üìã Getting Started",
    "text": "üìã Getting Started\nIn this section, we focus on preparing our R environment for the task at hand.\n\nLoading the required packages\nThe code chunk below loads our favorite package, tidyverse into the R environment. Once again, tidyverse is a collection of packages that will help with all the data and visualizations.\n\n\nPress to toggle code\npacman::p_load(tidyverse)\n\n\n\n\nLoading the data into the R environment\nUsing read_csv(), we load our data set ‚Äòrespopagesextod2022.csv‚Äô into the R environment as a tibble.\n\n\nPress to toggle code\npop_data <- read_csv(\"data/respopagesextod2022.csv\")\n\n\nWe have 10,098 rows and 7 columns, namely: ‚ÄòPA‚Äô, ‚ÄòSZ‚Äô, ‚ÄòAG‚Äô, ‚ÄòSex‚Äô, ‚ÄòTOD‚Äô, ‚ÄòPop‚Äô, and ‚ÄòTime‚Äô. For this exercise, we don‚Äôt need several of these rows (only focusing on Top 9 populated planning areas) and columns (‚ÄòSZ‚Äô, ‚ÄòTOD‚Äô, and ‚ÄòTime‚Äô are unnecessary). The next subsection shows how we obtain only the data we need and preprocess for our purpose.\n\n\nPreparing the data\nThe code chunk below uses the functions group_by() and summarise() to sum the ‚ÄòPop‚Äô of the rows grouped by ‚ÄòPA‚Äô, ‚ÄòAG‚Äô and ‚ÄòSex‚Äô. This creates a new tibble with just ‚ÄòPA‚Äô, ‚ÄòAG‚Äô, ‚ÄòSex‚Äô and collated sum of ‚ÄòPop‚Äô (shown as ‚Äòsum(Pop)‚Äô) as columns.\n\n\nPress to toggle code\npop_data <- pop_data %>% \n            group_by(PA, AG, Sex) %>% \n            summarise(sum(Pop))\n\nhead(pop_data)\n\n\n# A tibble: 6 √ó 4\n# Groups:   PA, AG [3]\n  PA         AG       Sex     `sum(Pop)`\n  <chr>      <chr>    <chr>        <dbl>\n1 Ang Mo Kio 0_to_4   Females       2480\n2 Ang Mo Kio 0_to_4   Males         2530\n3 Ang Mo Kio 10_to_14 Females       3320\n4 Ang Mo Kio 10_to_14 Males         3350\n5 Ang Mo Kio 15_to_19 Females       3620\n6 Ang Mo Kio 15_to_19 Males         3780\n\n\n\n\n\n\n\n\nüíª CODE REVIEW!\n\n\n\nWhat does %>% do?\nIt‚Äôs an operator that is part of the dplyr package that passes the left-hand side of the operator as the first argument of the function on the right-hand side.\n\n\nFor ease of use, we rename ‚Äòsum(Pop)‚Äô as ‚ÄòPop‚Äô using colnames().\n\n\nPress to toggle code\ncolnames(pop_data) <- c(\"PA\", \"AG\", \"Sex\", \"Pop\")\n\n\nNow to get just the top 9 most populated planning areas, we use the function top_n(). First however, we run pop_data %>% group_by(PA) %>%  summarise(sum(Pop)) to create a tibble with just the total populations of all the planning areas and use it as the first argument of top_n(). The second argument is the number of top elements, and the third argument is the column or variable to base the ranking on, which is ‚Äòsum(Pop)‚Äô. Adding the $PA at the end of the argument allows us to take only the names of the planning areas, as we‚Äôre taking that column from the resulting tibble.\n\n\nPress to toggle code\ntop_9 <- top_n(pop_data %>% \n              group_by(PA) %>% \n              summarise(sum(Pop)), \n              9, \n              `sum(Pop)`)$`PA`\n\n\nNow with the list of planning areas, we can filter() our data to only the top 9 most populated ones.\n\n\nPress to toggle code\ntop_9_data <- filter(pop_data, PA %in% as.vector(top_9))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#dataviz-makeover",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#dataviz-makeover",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "üñåÔ∏è DataViz Makeover",
    "text": "üñåÔ∏è DataViz Makeover\nIn this section, we go over a classmate‚Äôs Take-home Exercise 1 output, what can be improved, and how we build the new visualization on R.\n\nIntroducing the age-sex pyramid to critique\nThis visualization was taken from Take-home_Ex01_Dashboard | Tableau Public.\n\n\n\n\n\nFrom first impression, there are several observations to give feedback on. But first, let‚Äôs look at the positives.\n\nIt was my first time seeing an age-sex pyramid with the total as a shadow behind the bars to use as comparison. There was also a pyramid for the total of SG, and a bar graph representing the population of the planning areas presented. In general, the creator wanted to give as much information as possible.\nThe colors used to color the bars according to sex are ‚Äústereotypical‚Äù in a sense that it‚Äôs easy to comprehend what they represent.\nThe creator followed the guideline from the class where categorical variables should not make use of tick marks.\n\nWith that, I have the following critiques to make:\n\nThere‚Äôs a lot, arguably too much, going on. There‚Äôs a lot of graphs, a lot of bars, and lots of numbers that aren‚Äôt very clear. The numerical labels also tend to block the visuals of the bar graph, making it hard to distinguish the edges. For the sake of the assignment as well, it does not seem necessary to include the age-sex pyramid of the whole Singapore, and population of each planning area. The gray bars seem to be the total population of each age group used to compare to each of the sexes, however, it also seems very unnecessary to the purpose of the age-sex pyramid. The label of ‚ÄúPlanning Area‚Äù is also just taking up space, but it should be clear that the strip names are the planning areas from the title.\n\nThe unit of measurement. While there are age-sex pyramids that use the actual population values, it may be easier to digest percentages compared to looking at large values. It also helps the axis labels look cleaner. Using percentages should not take away from the structure of the pyramid.\nThe trellis chart is one row and affects the pyramids. Because all nine age-sex pyramids are lined up in a row, the bars become compressed. They now give the wrong impression, appearing more like a ‚Äústationary‚Äù structure rather than ‚Äúconstrictive- basically it affects the shape, therefore affecting the interpretation.\nThe ‚ÄòAge Group‚Äô axis labels. While still very much readable, the presence of the underscores (‚Äò_‚Äô) are unsightly.\n\nWith these in mind, we can start building our new age-sex pyramid trellis chart.\n\n\nChanging the unit of measurement\nIn order to get change the axis to percentages, there are some revisions to be made to our top_9_data tibble. By using aggregate() we can get the total population for each planning area. After joining that tibble to top_9_data to add a ‚ÄòTotal‚Äô column, we can add a new column using mutate() that computes for the ‚ÄòPercentage‚Äô using ‚ÄòPop‚Äô over ‚ÄòTotal‚Äô.\n\n\nPress to toggle code\ntop_9_sum <- setNames(aggregate(x = top_9_data$Pop,\n                            by = list(top_9_data$PA),\n                            FUN = sum),\n                            c(\"PA\",\"Total\"))\n\ntop_9_data <- top_9_data %>% \n        left_join(top_9_sum, \n                  by='PA') %>% \n        mutate(`Percentage` = `Pop`/`Total`)\n\nglimpse(top_9_data)\n\n\nRows: 342\nColumns: 6\nGroups: PA, AG [171]\n$ PA         <chr> \"Bedok\", \"Bedok\", \"Bedok\", \"Bedok\", \"Bedok\", \"Bedok\", \"Bedo‚Ä¶\n$ AG         <chr> \"0_to_4\", \"0_to_4\", \"10_to_14\", \"10_to_14\", \"15_to_19\", \"15‚Ä¶\n$ Sex        <chr> \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Males\",‚Ä¶\n$ Pop        <dbl> 4970, 5090, 6220, 6440, 6660, 6770, 7310, 7860, 8820, 9060,‚Ä¶\n$ Total      <dbl> 278640, 278640, 278640, 278640, 278640, 278640, 278640, 278‚Ä¶\n$ Percentage <dbl> 0.01783664, 0.01826730, 0.02232271, 0.02311226, 0.02390181,‚Ä¶\n\n\n\n\n\n\n\n\nüíªCODE REVIEW!\n\n\n\nThe function glimpse is used to present each column in the dataframe.\n\n\n\n\nFixing the Age Group values\nBy running the function str_replace(), we change the substring ‚Äú_to_‚Äù to ‚Äù - ‚Äú, effectively removing the underscores. We also change‚Äù90_and_over‚Äù to ‚Äú> 90‚Äù for easy comprehension.\n\n\nPress to toggle code\ntop_9_data$AG <- str_replace(top_9_data$AG, \"_to_\", \" - \")\n\ntop_9_data$AG <- str_replace(top_9_data$AG, \"90_and_over\", \"> 90\")\n\n\n\n\n\n\n\nBuilding the base age-sex pyramid\nThe code chunk below gets us started with building our age-sex pyramid. Each geom_bar() is divided into a subset that is filtered by sex. We use coord_flip() to reverse the x and y axis.\n\n\nPress to toggle code\nggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity') + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity') +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nNow we have the issue of the two bars representing males and females overlapping each other. To solve this, we change the ‚ÄòPercentage‚Äô values for ‚ÄúMales‚Äù to be negative using the code chunk below.\n\n\nPress to toggle code\ntop_9_data <- top_9_data %>%\n  mutate(Percentage = ifelse(Sex == \"Males\", \n                             -Percentage, \n                             Percentage))\nhead(top_9_data)\n\n\n# A tibble: 6 √ó 6\n# Groups:   PA, AG [3]\n  PA    AG      Sex       Pop  Total Percentage\n  <chr> <chr>   <chr>   <dbl>  <dbl>      <dbl>\n1 Bedok 0 - 4   Males    5090 278640    -0.0183\n2 Bedok 0 - 4   Females  4970 278640     0.0178\n3 Bedok 5 - 9   Males    5960 278640    -0.0214\n4 Bedok 5 - 9   Females  5700 278640     0.0205\n5 Bedok 10 - 14 Males    6440 278640    -0.0231\n6 Bedok 10 - 14 Females  6220 278640     0.0223\n\n\nThere‚Äôs also the issue of the age group ‚Äú5-9‚Äù appearing between ‚Äú45-49‚Äù and ‚Äú50-54‚Äù due to alphabetical sorting of the strings. To fix this, we declare a vector with the right arrangement of the age group categories.\n\n\n\n\n\n\nüå∏ PERSONAL COMMENTS!\n\n\n\nThis was not done manually. I ran unique(top_9_data$AG), copy-pasted it and moved ‚Äú5-9‚Äù to the right position.\n\n\n\n\nPress to toggle code\nAG_sort = c(\"0 - 4\",\"5 - 9\",\"10 - 14\", \"15 - 19\", \"20 - 24\", \"25 - 29\", \"30 - 34\", \"35 - 39\", \"40 - 44\", \"45 - 49\",\"50 - 54\",\"55 - 59\",\"60 - 64\",\"65 - 69\",\"70 - 74\",\"75 - 79\", \"80 - 84\",\"85 - 89\",\"> 90\")\n\n\nNow with the changes made above, we can try running our ggplot model again with a few new changes. First we have scale_y_continuous() which we use to fix the percentage labels. Then we have scale_x_discrete() to set ‚Äòlimits‚Äô to follow AG_sort.\n\n\nPress to toggle code\nggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity') + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity') +\n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \n                                     \"%\"),\n                    limits = c(-0.6, 0.6)) + # new \n  scale_x_discrete(limits = AG_sort) + # new\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nCreating a 3x3 trellis chart\nNow we‚Äôre ready to turn our single row trellis chart to one that is distributed evenly as a 3x3 chart. Fortunately, ggplot2 provides a function called facet_wrap() which allows us to generate panels for each planning area.\n\n\nPress to toggle code\nggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity') + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity') +\n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \"%\"),\n                        limits = c(-0.06, 0.06)) + \n  scale_x_discrete(limits = AG_sort) +\n  coord_flip() + \n  facet_wrap(~ PA, nrow = 3) # newly added line\n\n\n\n\n\nNow we can clearly see the shape of each of the pyramids.\n\n\n\n\n\n\nüñäÔ∏è TAKE NOTE!\n\n\n\nAt this point the upper limit for scale_y_continuous() was set to 0.06 instead of 0.6 since the scales would be per planning area already. By running max() on the ‚ÄòPercentage‚Äô column, we get that the highest value and between 5-6%, therefore we set the upper limit to 0.06.\n\n\n\n\nFixing axis and legend details\nThe ‚ÄòAge Group‚Äô labels seem to be a bit too compressed. Our legend is also unnecessarily large. Using theme() and setting element_text() we can format the different text in our chart. Also under theme(), we can set axis.ticks.y = element_blank() in order to remove the tick marks on the ‚ÄòAge Group‚Äô axis since it is a categorical variable.\n\n\nPress to toggle code\nggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity') + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity') +\n  \n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \"%\"),\n                    limits = c(-0.06, 0.06),\n                    breaks = seq(-0.06,0.06, by = 0.02)) + \n  scale_x_discrete(limits = AG_sort) +\n  \n  coord_flip() + \n  \n  theme(axis.text = element_text(size = 7),\n        axis.title = element_text(size = 9),\n        legend.text = element_text(size = 8),\n        legend.title = element_text(size = 9),\n        axis.ticks.y = element_blank()) + \n  \n  xlab(\"Age Group\") + \n  \n  facet_wrap(~ PA, nrow = 3)\n\n\n\n\n\n\n\nAdding a title and caption\nThis is an important part of any graph, chart or visualization. While it‚Äôs important to show and not tell, it‚Äôs important to set the context of what the person is viewing. Using labs() we can set the ‚Äòtitle‚Äô, ‚Äòsubtitle‚Äô and ‚Äòcaption‚Äô as shown.\n\n\nPress to toggle code\nggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity') + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity') +\n  \n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \"%\"),\n                    limits = c(-0.06, 0.06),\n                    breaks = seq(-0.06,0.06, by = 0.02)) + \n  scale_x_discrete(limits = AG_sort) +\n  coord_flip() + \n  \n  theme(axis.text = element_text(size = 7),\n        axis.title = element_text(size = 9),\n        legend.text = element_text(size = 8),\n        legend.title = element_text(size = 9),\n        axis.ticks.y = element_blank(),\n        plot.title = element_text(size = 14,\n                                  face = \"bold\"), # new\n        plot.subtitle = element_text(size = 10), #new\n        plot.caption = element_text(size = 6), #new\n        strip.text = element_text(size = 8)) +  #new\n  \n  xlab(\"Age Group\") + \n  ylab(\"Percentage (%)\") + \n  labs(title = \"Age-Sex Pyramid of Top 9 Most Populated Planning Areas, 2022\", #new\n       subtitle = \"Age group distribution of percentage population for males and females in nine of the most populated planning areas in Singapore\", #new\n       caption =\"Data Source: Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 (Singapore Department of Statistics (DOS))\")  + #new\n  facet_wrap(~ PA, nrow = 3)\n\n\n\n\n\n\n\nChanging the theme to be more visually appealing\nBy adding theme_bw() (from the given theme elements) we get a cleaner grid and sharper panels. The fill colors for the ‚ÄòSex‚Äô were also changed using scale_fill_manual(). Finally, an additional argument was added to the geom_bar() objects called ‚Äôcolor‚Äô which adds borders to the bars to look more defined.\n\n\n\n\n\n\nüñäÔ∏è TAKE NOTE!\n\n\n\nThe order of the placement of theme_bw() or any other pre-made theme elements could ruin your customized formats. In this case, I placed it before theme(), otherwise it would override the changes I made to the title and subtitle text.\n\n\n\n\nPress to toggle code\nggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity',\n           color = 'black') +  # new\n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity',\n           color = 'black') +  # new \n  \n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \"%\"),\n                    limits = c(-0.06, 0.06),\n                    breaks = seq(-0.06,0.06, by = 0.02)) + \n  scale_x_discrete(limits = AG_sort) +\n  coord_flip() + \n  \n  theme_bw() + # new\n  \n  theme(axis.text = element_text(size = 8),\n        axis.title = element_text(size = 10),\n        legend.text = element_text(size = 9),\n        legend.title = element_text(size = 10),\n        axis.ticks.y = element_blank(),\n        plot.title = element_text(size = 15,\n                                  face = \"bold\"), \n        plot.subtitle = element_text(size = 11,\n                                     face = \"italic\"), \n        plot.caption = element_text(size = 7), \n        strip.text = element_text(size = 10)) +  \n  \n  xlab(\"Age Group\") + \n  ylab(\"Percentage (%)\") + \n  labs(title = \"Age-Sex Pyramid of Top 9 Most Populated Planning Areas, 2022\", \n       subtitle = \"Age group distribution of percentage population for males and females in nine of the most populated planning areas in Singapore\", \n       caption =\"Data Source: Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 (Singapore Department of Statistics (DOS))\")  + \n\n  scale_fill_manual(values=c(\"#ff63a4\", # new\n                             \"#2d74f7\")) + # new\n  facet_wrap(~ PA, nrow = 3)\n\n\n\n\n\nWith this we have our final product. Simpler is better?"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#remarks-doubts-and-recommendations",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#remarks-doubts-and-recommendations",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "üí¨ Remarks, Doubts and Recommendations",
    "text": "üí¨ Remarks, Doubts and Recommendations\n\nI limited the exercise scope to just the trellis chart and did not include the full Singapore pyramid and planning area population bar graphs.\nI originally wanted to recreate the entire graph of whichever Take-home Exercise 1 I would choose, but then I realized at some point that I wouldn‚Äôt be able to fully recreate them in R (or at least I wouldn‚Äôt know how to). And so I opted to just build from the ground up.\nIt was only after I had worked on the code that I realized we were ideally not supposed to make any changes to the dataset. I‚Äôm unsure if converting to percentages counts, but if it does, then that was my mistake.\nIf this were not a trellis chart, it may be possible to explore placing the ‚ÄòAge Group‚Äô axis in between the Males and Females bars. However, in a trellis chart, it may seem repetitive to have it in every panel.\nAnother thing that I feel like would be okay if not for the trellis chart format is adding the percentage labels. I opted to not add it now because the graphs would seem too cluttered and the labels would likely not be very visible. Below is a code chunk using geom_text() to illustrate what the output would have been with percentage labels.\n\n\nPress to toggle code\nggplot(top_9_data, \n            aes(x = AG, \n                y = Percentage, \n                fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity',\n           color = 'black') +  \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity',\n           color = 'black') +  \n    geom_text(data = subset(top_9_data, \n                         Sex == \"Males\"),\n              aes(label = sprintf(\"%0.2f\", \n                          round(abs(Percentage)*100, \n                                digits = 2))),\n              hjust = 1.2,\n             size = 2) +  # new\n    geom_text(data = subset(top_9_data, \n                         Sex == \"Females\"),\n              aes(label = sprintf(\"%0.2f\", \n                          round(Percentage*100, \n                                digits = 2))),\n              hjust = -0.5,\n             size = 2) +  # new\n\n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \"%\"),\n                    limits = c(-0.06, 0.06),\n                    breaks = seq(-0.06,0.06, \n                                 by = 0.02)) + \n  scale_x_discrete(limits = AG_sort) +\n  coord_flip() + \n\n  theme_bw() + \n\n  theme(axis.text = element_text(size = 8),\n        axis.title = element_text(size = 10),\n        legend.text = element_text(size = 9),\n        legend.title = element_text(size = 10),\n        axis.ticks.y = element_blank(),\n        plot.title = element_text(size = 15,\n                                  face = \"bold\"), \n        plot.subtitle = element_text(size = 11,\n                                     face = \"italic\"), \n        plot.caption = element_text(size = 7), \n        strip.text = element_text(size = 10)) + \n\n  xlab(\"Age Group\") + \n  ylab(\"Percentage (%)\") + \n  labs(title = \"Age-Sex Pyramid of Top 9 Most Populated Planning Areas, 2022\", \n       subtitle = \"Age group distribution of percentage population for males and females in nine of the most populated planning areas in Singapore\", \n       caption =\"Data Source: Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 (Singapore Department of Statistics (DOS))\")  + \n\n  scale_fill_manual(values=c(\"#ff63a4\",\n                             \"#2d74f7\")) +\n  facet_wrap(~ PA, nrow = 3)\n\n\n\n\n\nUnrelated to the visualization being a trellis chart, I was considering removing the legend because of all the negative space it creates. Removing it would provide more space for the pyramids to stretch as well. Following the original Take-home Exercise 1 output, I could have color-coded the words ‚Äúmales‚Äù and ‚Äúfemales‚Äù in the subtitle to use as a ‚Äúlegend‚Äù. However, I was unsure of whether the text was too small to notice the font color change.\n\n\nPress to toggle code\npacman::p_load(ggtext)\n\nggplot(top_9_data, \n            aes(x = AG, \n                y = Percentage, \n                fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity',\n           color = 'black') +  \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity',\n           color = 'black') +  \n    geom_text(data = subset(top_9_data, \n                         Sex == \"Males\"),\n              aes(label = sprintf(\"%0.2f\", \n                          round(abs(Percentage)*100, \n                                digits = 2))),\n              hjust = 1.2,\n             size = 2) +  # new\n    geom_text(data = subset(top_9_data, \n                         Sex == \"Females\"),\n              aes(label = sprintf(\"%0.2f\", \n                          round(Percentage*100, \n                                digits = 2))),\n              hjust = -0.5,\n             size = 2) +  # new\n\n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \"%\"),\n                    limits = c(-0.06, 0.06),\n                    breaks = seq(-0.06,0.06, \n                                 by = 0.02)) + \n  scale_x_discrete(limits = AG_sort) +\n  coord_flip() + \n\n  theme_bw() + \n\n  theme(axis.text = element_text(size = 8),\n        axis.title = element_text(size = 10),\n        legend.position = \"none\", # new\n        axis.ticks.y = element_blank(),\n        plot.title = element_text(size = 15,\n                                  face = \"bold\"), \n        plot.subtitle = element_markdown(size = 11,\n                                     face = \"italic\"), \n        plot.caption = element_text(size = 7), \n        strip.text = element_text(size = 10)) + \n\n  xlab(\"Age Group\") + \n  ylab(\"Percentage (%)\") + \n  labs(title = \"Age-Sex Pyramid of Top 9 Most Populated Planning Areas, 2022\", \n       subtitle = \"Age group distribution of percentage population for <span style='color:#2d74f7;'>males</span> and <span style='color:#ff63a4;'>females</span> in nine of the most populated planning areas in Singapore\", \n       caption =\"Data Source: Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 (Singapore Department of Statistics (DOS))\")  + \n\n  scale_fill_manual(values=c(\"#ff63a4\",\n                             \"#2d74f7\")) +\n  facet_wrap(~ PA, nrow = 3)\n\n\n\n\n\nThe code chunk above uses the package ggtext which is an extension of ggplot that allows markdown/HTML rendering for the plots. By setting the ‚Äòsubtitle‚Äô to ‚Äòelement_markdown()‚Äô in theme(), we can set the color of different text snippets in subtitle. The legend was also removed by setting legend.position = \"none\".\nOne thing I initially thought would help with easily understanding the population structure was by adding geom_rect() objects as background colors symbolizing a classification of age groups. For example if we follow the definitions in this article on age group classification, then we‚Äôd have 0‚Äì14‚Äâyears old (pediatric group), 15‚Äì47‚Äâyears old (youth group), 48‚Äì63‚Äâyears old (middle-aged group), and‚Äâ‚â•‚Äâ64‚Äâyears old (elderly group). The background would then be colored behind the bars according to the groupings to easily identify which age group classification has more or less populations. However, I went against this because I thought having a plot with too many colors and filled in every space with colors would be too painful to the eyes.\nIn relation to the point above, I also considered including the age dependency ratio and/or child dependency ratio at the side of each pyramid.\nLastly, given our recent lesson on interactivity, we can also apply tooltips to the bars for easy comprehension. This would eliminate the ‚Äúclutter‚Äù of having percentage labels per bar. A simple example is given below produced by ggiraph. The tooltip presents the sex, age group, percentage and population. (Figure adjustments using special Quarto syntax seem to not affect this figure so work needs to be done to adjust the plot.)\n\n\n\nPress to toggle code\npacman::p_load(ggiraph)\n\ng <- ggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar_interactive(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity',\n           color = 'black',\n           size = 0.2,\n           aes(tooltip = paste0(\"Males \\n\",\n                                \"Age Group: \",\n                                AG,\n                                \"\\n Percentage: \", \n                                sprintf(\"%0.2f\", \n                                round(abs(Percentage)*100, \n                                digits = 2)),\n                                \"% \\n Population: \",\n                                Pop))) + \n  geom_bar_interactive(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity',\n           color = 'black',\n           size = 0.2,\n           aes(tooltip = paste0(\"Females \\n\",\n                                \"Age Group: \",\n                                AG,\n                                \"\\n Percentage: \", \n                                sprintf(\"%0.2f\", \n                                round(Percentage*100, \n                                digits = 2)),\n                                \"% \\n Population: \",\n                                Pop))) +\n  \n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \"%\"),\n                    limits = c(-0.06, 0.06),\n                    breaks = seq(-0.06,0.06, by = 0.02)) + \n  scale_x_discrete(limits = AG_sort) +\n  coord_flip() + \n  \n  theme_bw() + \n  \n  theme(axis.text = element_text(size = 5),\n        axis.title = element_text(size = 7),\n        legend.position = \"none\",\n        axis.ticks.y = element_blank(),\n        plot.title = element_text(size = 11,\n                                  face = \"bold\"), \n        plot.subtitle = element_markdown(size = 6,\n                                     face = \"italic\"), \n        plot.caption = element_text(size = 4), \n        panel.grid.minor = element_line(size = 0.2), \n        panel.grid.major = element_line(size = 0.5),\n        strip.text = element_text(size = 6,\n                                  margin = margin(0.1,0,0.1,0, \"cm\"))) +  \n  xlab(\"Age Group\") + \n  ylab(\"Percentage (%)\") + \n  labs(title = \"Age-Sex Pyramid of Top 9 Most Populated Planning Areas, 2022\", \n       subtitle = \"Age group distribution of percentage population for <span style='color:#2d74f7;'>males</span> and <span style='color:#ff63a4;'>females</span> in nine of the most populated planning areas in Singapore\", \n       caption =\"Data Soruce: Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 (Singapore Department of Statistics (DOS))\")  + \n\n  scale_fill_manual(values=c(\"#ff63a4\", \n                             \"#2d74f7\")) + \n  facet_wrap(~ PA, nrow = 3)\n\ngirafe(\n  ggobj = g,\n  width_svg = 6,\n  height_svg = 8.5*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nüå∏ ENDING REMARKS\n\n\n\nAt the end of the day, a lot is possible with R. I hope to further explore these possibilities with future exercises."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html",
    "title": "Take-home Exercise 3: Putting Visual Analytics into Practical Use",
    "section": "",
    "text": "This document serves as a submission for Take-home Exercise 3 as required by the course ISSS608 Visual Analytics and Applications.\nIn this exercise, we aim to bring to apply the analytical visualization techniques discussed in Lesson 4: Fundamentals of Visual Analyticsand practiced in In-class Exercise 4.\n\n\nIn order to achieve the assignment‚Äôs objective, we will be taking a look at the resale prices of public housing property by residential towns and estates in Singapore.\nThe dataset used was Resale flat princes based on registration date from Jan-2017 onwards which is available at data.gov.sg as shown in the screenshot below."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#getting-started",
    "title": "Take-home Exercise 3: Putting Visual Analytics into Practical Use",
    "section": "üå± Getting Started",
    "text": "üå± Getting Started\n\nInstalling and loading required packages\nThe code chunk below installs and loads the packages to be used.\n\n\nPress to toggle code\npacman::p_load(plotly, crosstalk, DT, ggdist, gganimate, ggstatsplot, FunnelPlotR, knitr, tidyverse)\n\n\n\n\nLoading in the resale flat prices CSV data\n\n\nPress to toggle code\nresale <- read_csv(\"data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\n\n\n\n\nPress to toggle code\nglimpse(resale)\n\n\nRows: 146,783\nColumns: 11\n$ month               <chr> \"2017-01\", \"2017-01\", \"2017-01\", \"2017-01\", \"2017-‚Ä¶\n$ town                <chr> \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO KIO\", \"ANG MO ‚Ä¶\n$ flat_type           <chr> \"2 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", ‚Ä¶\n$ block               <chr> \"406\", \"108\", \"602\", \"465\", \"601\", \"150\", \"447\", \"‚Ä¶\n$ street_name         <chr> \"ANG MO KIO AVE 10\", \"ANG MO KIO AVE 4\", \"ANG MO K‚Ä¶\n$ storey_range        <chr> \"10 TO 12\", \"01 TO 03\", \"01 TO 03\", \"04 TO 06\", \"0‚Ä¶\n$ floor_area_sqm      <dbl> 44, 67, 67, 68, 67, 68, 68, 67, 68, 67, 68, 67, 67‚Ä¶\n$ flat_model          <chr> \"Improved\", \"New Generation\", \"New Generation\", \"N‚Ä¶\n$ lease_commence_date <dbl> 1979, 1978, 1980, 1980, 1980, 1981, 1979, 1976, 19‚Ä¶\n$ remaining_lease     <chr> \"61 years 04 months\", \"60 years 07 months\", \"62 ye‚Ä¶\n$ resale_price        <dbl> 232000, 250000, 262000, 265000, 265000, 275000, 28‚Ä¶"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#data-wrangling",
    "title": "Take-home Exercise 3: Putting Visual Analytics into Practical Use",
    "section": "üóÇÔ∏è Data Wrangling",
    "text": "üóÇÔ∏è Data Wrangling\nLet‚Äôs recall the limitations of this assignment.\n\nFor the purpose of this study, the focus should be on 3-ROOM, 4-ROOM and 5-ROOM types. You can choose to focus on either one housing type or multiple housing types. The study period should be on 2022.\n\n\nLimiting the study period to 2022\nLet‚Äôs take a look at the range of values for month. Using unique() we see that we have data from 2017 until the second month of 2023.\n\n\nPress to toggle code\nunique(resale$month)\n\n\n [1] \"2017-01\" \"2017-02\" \"2017-03\" \"2017-04\" \"2017-05\" \"2017-06\" \"2017-07\"\n [8] \"2017-08\" \"2017-09\" \"2017-10\" \"2017-11\" \"2017-12\" \"2018-01\" \"2018-02\"\n[15] \"2018-03\" \"2018-04\" \"2018-05\" \"2018-06\" \"2018-07\" \"2018-08\" \"2018-09\"\n[22] \"2018-10\" \"2018-11\" \"2018-12\" \"2019-01\" \"2019-02\" \"2019-03\" \"2019-04\"\n[29] \"2019-05\" \"2019-06\" \"2019-07\" \"2019-08\" \"2019-09\" \"2019-10\" \"2019-11\"\n[36] \"2019-12\" \"2020-01\" \"2020-02\" \"2020-03\" \"2020-04\" \"2020-05\" \"2020-06\"\n[43] \"2020-07\" \"2020-08\" \"2020-09\" \"2020-10\" \"2020-11\" \"2020-12\" \"2021-01\"\n[50] \"2021-02\" \"2021-03\" \"2021-04\" \"2021-05\" \"2021-06\" \"2021-07\" \"2021-08\"\n[57] \"2021-09\" \"2021-10\" \"2021-11\" \"2021-12\" \"2022-01\" \"2022-02\" \"2022-03\"\n[64] \"2022-04\" \"2022-05\" \"2022-06\" \"2022-07\" \"2022-08\" \"2022-09\" \"2022-10\"\n[71] \"2022-11\" \"2022-12\" \"2023-01\" \"2023-02\"\n\n\nGiven that our month values are string, the function grepl() is used to look for matches of a pattern and returns true if found. By filtering the ‚Äòmonth‚Äô values that contain ‚Äú2022‚Äù, we can extract all 2022 data. The second part of the code chunk below creates a Date type object then takes the numerical month value using format().\n\n\nPress to toggle code\nresale_fil <- resale %>% \n              filter(grepl('2022', month)) %>%\n              mutate(month = as.numeric(format(as.Date(paste0(month, \"-01\")), \"%m\")))\n\n\n\n\nLimiting the study to particular ‚Äôflat_type‚Äôs\nIf we take a look at all the possible ‚Äôflat_type‚Äôs, we‚Äôll find that there are 7 possible values.\n\n\nPress to toggle code\nunique(resale_fil$flat_type)\n\n\n[1] \"2 ROOM\"           \"3 ROOM\"           \"4 ROOM\"           \"5 ROOM\"          \n[5] \"EXECUTIVE\"        \"MULTI-GENERATION\" \"1 ROOM\"          \n\n\nBy using %in% we can filter our tibble into the records with ‚Äòflat_type‚Äô equal to ‚Äú3 ROOM‚Äù, ‚Äú4 ROOM‚Äù, or ‚Äú5 ROOM‚Äù.\n\n\nPress to toggle code\nresale_fil <- resale_fil %>% \n              filter(flat_type %in% c(\"3 ROOM\", \"4 ROOM\", \"5 ROOM\"))\n\n\nChecking over our tibble again, we can see that only the desired ‚Äòflat_type‚Äô values remain.\n\n\nPress to toggle code\nunique(resale_fil$flat_type)\n\n\n[1] \"3 ROOM\" \"4 ROOM\" \"5 ROOM\"\n\n\n\n\nChecking for NA values\nNow that we‚Äôve filtered our data, we should check for any null or NA values. The code chunk below reveals that we don‚Äôt have to worry about any null or NA values.\n\n\nPress to toggle code\ncolSums(is.na(resale_fil))\n\n\n              month                town           flat_type               block \n                  0                   0                   0                   0 \n        street_name        storey_range      floor_area_sqm          flat_model \n                  0                   0                   0                   0 \nlease_commence_date     remaining_lease        resale_price \n                  0                   0                   0 \n\n\n\n\nConverting ‚Äòremaining_lease‚Äô to a numerical value\nThis is the most complex of the data wrangling steps. If we take a look at the ‚Äòremaining_lease‚Äô values, we find that they are string values containing a number of years and months.\n\n\nPress to toggle code\nn_distinct(resale_fil$remaining_lease)\n\n\n[1] 638\n\n\n\n\nPress to toggle code\nresale_fil[c('remaining_lease_year', \n         'remaining_lease_month')] <- str_split_fixed(resale_fil$remaining_lease,\n                  ' years', \n                  2)\nresale_fil <- resale_fil %>% \n  mutate(remaining_lease_year = as.numeric(remaining_lease_year)) %>%\n  mutate(remaining_lease_month = parse_number(remaining_lease_month)) %>%\n  mutate(remaining_lease_month = replace_na(remaining_lease_month, 0)) %>%\n  mutate(remaining_lease = remaining_lease_year + (remaining_lease_month/12))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#exploratory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#exploratory-data-analysis",
    "title": "Take-home Exercise 3: Putting Visual Analytics into Practical Use",
    "section": "üöÄ Exploratory Data Analysis",
    "text": "üöÄ Exploratory Data Analysis\n\nLooking at the distribution of resale prices per flat type\n\n\nPress to toggle code\nggplot(data = resale_fil, \n       aes(x = resale_price)) +\n  geom_histogram(bins = 20,            \n                 color=\"black\",      \n                 fill=\"#e3879e\") + \n  facet_wrap(~ flat_type, nrow = 3)\n\n\n\n\n\n\n\nPress to toggle code\nggplot(data = resale_fil, \n       aes(x = resale_price,\n           fill = flat_type)) +\n  geom_histogram(bins = 20,            \n                 color=\"black\") + \n  scale_fill_manual(values = c(\"#e3879e\",\"#af7cb6\",\"#9DCAEB\"))\n\n\n\n\n\n\n\nPress to toggle code\nggplot(data = resale_fil, \n       aes(y = resale_price, x= flat_type)) +\n  geom_boxplot(fill = \"#F3DDE3\") +\n  stat_summary(geom = \"point\",       \n               fun.y = \"mean\",         \n               colour = \"#cb6a82\",        \n               size=3)\n\n\n\n\n\n\n\n\n\n\n\nPress to toggle code\ng <- ggbetweenstats(\n  data = resale_fil,\n  x = flat_type, \n  y = resale_price)\n\ng\n\n\n\n\n\n\n\nTaking a look at the resale price per town\n\n\nPress to toggle code\nggplot(data = resale_fil, \n       aes(y = resale_price)) +\n  geom_boxplot() + \n  facet_wrap(~ town, \n             nrow = 4, \n             strip.position = \"top\")\n\n\n\n\n\n\n\n\n\n\n\nExploring\n\n\nPress to toggle code\nplot_ly(\n  data = resale_fil,\n  x = ~floor_area_sqm,\n  y = ~resale_price,\n  color = ~flat_type,\n  colors = c(\"#e3879e\",\"#af7cb6\",\"#9DCAEB\"),\n  border = list(color = \"#000000\")\n)\n\n\n\n\n\n\n\n\nfgfgf\n\n\nPress to toggle code\nplot_ly(\n  data = resale_fil,\n  x = ~remaining_lease,\n  y = ~resale_price,\n  color = ~flat_type,\n  colors = c(\"#e3879e\",\"#af7cb6\",\"#9DCAEB\"),\n  text = ~paste(\"Remaining Lease:\", \n                remaining_lease_year,\n                \" years and\",\n                remaining_lease_month,\n                \"months <br> Resale Flat Price: $\",\n                resale_price)\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#reactions-and-conclusions",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#reactions-and-conclusions",
    "title": "Take-home Exercise 3: Putting Visual Analytics into Practical Use",
    "section": "üëã Reactions and Conclusions",
    "text": "üëã Reactions and Conclusions"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html",
    "title": "Take-home Exercise 4",
    "section": "",
    "text": "This document serves as a submission for Take-home Exercise 3 as required by the course ISSS608 Visual Analytics and Applications.\n\n\nIn this exercise, we aim to apply Lesson 6: It‚Äôs About Time\n\n\n\nFor this exercise, we used the ‚ÄúMerchandise Trade by Region/Market‚Äù dataset available from the Department of Statistics, Singapore as shown in the screenshot below.\n\n\n\n\n\nThe data contains two sheets, each providing imports and exports monthly. The values (in dollars) are collated in total, by continent or region, and by country."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#getting-started",
    "title": "Take-home Exercise 4",
    "section": "üå± Getting Started",
    "text": "üå± Getting Started\n\nLoading required R packages into the R environment\nAs usual, our first step is to load all the necessary packages. The code chunk below uses p_load() to install and load these packages.\n\n\nPress to toggle code\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, plotly, ggbraid, ggrepel, gganimate, transformr, patchwork, gifski, tidyverse)\n\n\n\n\nLoading the data into the R environment\nSince the study period is from January 2020 to December 2022, we\n\n\nPress to toggle code\nimports <- read_excel(\"data/merchant_trade.xlsx\", \n                      sheet = \"T1\",\n                      range = \"A10:AL129\")\n\nexports <- read_excel(\"data/merchant_trade.xlsx\",\n                      sheet = \"T2\",\n                      range = \"A10:AL101\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#data-wrangling",
    "title": "Take-home Exercise 4",
    "section": "üóÇÔ∏è Data Wrangling",
    "text": "üóÇÔ∏è Data Wrangling\n\nSplitting the data with minor edits\n\n\nPress to toggle code\nimports_region <- imports %>% \n                  slice(2:7) %>% \n                  rename(\"Region\" = \"Data Series\") %>%\n                  mutate(Region = str_remove(Region, \n                                             \" \\\\(Million Dollars\\\\)\"))\n\nexports_region <- exports %>% \n                  slice(2:7) %>% \n                  rename(\"Region\" = \"Data Series\") %>%\n                  mutate(Region = str_remove(Region, \n                                             \" \\\\(Million Dollars\\\\)\"))\n\nimports_country <- imports %>% \n                   slice(1,8:n()) %>%\n                   rename(\"Country\" = \"Data Series\") %>%\n                  mutate(Country = str_remove(Country, \n                                             \" \\\\(Thousand Dollars\\\\)\")) %>%\n                  mutate(Country = str_replace(Country,\n                                               \"Total Merchandise Imports\",\n                                               \"Total\"))\n\nexports_country <- exports %>% \n                   slice(1,8:n()) %>%\n                   rename(\"Country\" = \"Data Series\") %>%\n                  mutate(Country = str_remove(Country, \n                                             \" \\\\(Thousand Dollars\\\\)\")) %>%\n                  mutate(Country = str_replace(Country,\n                                               \"Total Merchandise Exports\",\n                                               \"Total\"))\n\nglimpse(imports_region)\n\n\nRows: 6\nColumns: 38\n$ Region     <chr> \"America\", \"Asia\", \"Europe\", \"Oceania\", \"Africa\", \"European‚Ä¶\n$ `2023 Jan` <dbl> 6267.4, 30174.0, 6427.8, 983.3, 541.1, 4580.9\n$ `2022 Dec` <dbl> 6901.5, 33611.7, 7541.8, 1399.9, 414.9, 5058.8\n$ `2022 Nov` <dbl> 7529.4, 34733.7, 7242.8, 664.4, 483.6, 4961.4\n$ `2022 Oct` <dbl> 7666.4, 36120.9, 7475.9, 1329.8, 589.9, 4685.2\n$ `2022 Sep` <dbl> 7995.9, 37696.3, 8167.6, 1544.6, 395.0, 5145.8\n$ `2022 Aug` <dbl> 8633.8, 40911.9, 7433.2, 935.9, 551.2, 5131.0\n$ `2022 Jul` <dbl> 7879.7, 43214.2, 8300.5, 1060.6, 574.4, 5233.5\n$ `2022 Jun` <dbl> 8024.0, 42507.2, 7300.2, 1141.8, 675.9, 5135.8\n$ `2022 May` <dbl> 8521.1, 40534.7, 7030.8, 1164.7, 352.9, 4551.3\n$ `2022 Apr` <dbl> 7822.1, 38735.7, 7407.2, 1559.1, 591.9, 5375.2\n$ `2022 Mar` <dbl> 7176.1, 42199.9, 7203.2, 863.9, 636.9, 5137.2\n$ `2022 Feb` <dbl> 5385.2, 31611.3, 6479.0, 814.4, 668.5, 4064.1\n$ `2022 Jan` <dbl> 5850.9, 35014.0, 7821.6, 810.4, 529.9, 4561.2\n$ `2021 Dec` <dbl> 6261.1, 39140.3, 7586.3, 744.8, 616.8, 4974.6\n$ `2021 Nov` <dbl> 6127.4, 35949.6, 6872.0, 994.1, 731.8, 4664.2\n$ `2021 Oct` <dbl> 6027.6, 33552.7, 6714.8, 1021.2, 628.8, 4643.1\n$ `2021 Sep` <dbl> 5631.6, 32533.4, 6882.1, 599.8, 333.4, 4988.2\n$ `2021 Aug` <dbl> 5750.1, 31492.5, 5919.4, 744.0, 808.4, 4368.9\n$ `2021 Jul` <dbl> 5728.6, 31645.0, 6919.2, 1201.2, 613.8, 4730.0\n$ `2021 Jun` <dbl> 5457.4, 31021.0, 7011.2, 890.1, 660.2, 5146.6\n$ `2021 May` <dbl> 5191.8, 28497.2, 6563.5, 1001.7, 305.4, 4755.5\n$ `2021 Apr` <dbl> 6195.9, 30623.1, 6740.5, 1030.5, 579.6, 4607.1\n$ `2021 Mar` <dbl> 5303.5, 31367.8, 8964.0, 1131.0, 902.2, 5445.5\n$ `2021 Feb` <dbl> 4164.2, 26122.6, 5403.7, 1134.7, 818.5, 3709.0\n$ `2021 Jan` <dbl> 4580.0, 27413.7, 5749.6, 705.5, 579.9, 3832.5\n$ `2020 Dec` <dbl> 4676.4, 28200.4, 6087.4, 540.9, 649.4, 4251.3\n$ `2020 Nov` <dbl> 4588.2, 25844.9, 6133.5, 1412.8, 498.6, 4373.3\n$ `2020 Oct` <dbl> 4869.7, 26127.9, 6285.4, 577.3, 313.5, 4632.5\n$ `2020 Sep` <dbl> 4886.4, 27823.2, 5316.9, 477.7, 297.2, 3766.5\n$ `2020 Aug` <dbl> 4132.0, 26052.3, 5225.0, 586.5, 476.5, 3345.4\n$ `2020 Jul` <dbl> 4667.3, 26767.4, 5475.3, 493.1, 440.6, 3735.5\n$ `2020 Jun` <dbl> 4686.2, 24779.3, 4960.7, 456.4, 238.2, 3422.9\n$ `2020 May` <dbl> 4259.0, 21718.9, 4629.0, 441.8, 409.6, 2910.1\n$ `2020 Apr` <dbl> 5183.5, 24534.5, 5150.6, 637.6, 372.6, 3662.7\n$ `2020 Mar` <dbl> 5910.8, 26783.6, 6333.3, 845.9, 559.4, 4178.2\n$ `2020 Feb` <dbl> 5314.1, 26588.1, 6209.6, 694.7, 666.1, 3933.2\n$ `2020 Jan` <dbl> 5844.1, 27128.1, 6859.7, 819.7, 528.6, 4370.9\n\n\n\n\nPivoting the table\n\n\nPress to toggle code\nimports_region <- imports_region %>% \n                  pivot_longer(cols = !\"Region\",\n                               names_to = \"Month\",\n                               values_to = \"Amount\")\n\nexports_region <- exports_region %>% \n                  pivot_longer(cols = !\"Region\",\n                               names_to = \"Month\",\n                               values_to = \"Amount\")\n\nimports_country <- imports_country %>% \n                  pivot_longer(cols = !\"Country\",\n                               names_to = \"Month\",\n                               values_to = \"Amount\")\n\nexports_country <- exports_country %>% \n                  pivot_longer(cols = !\"Country\",\n                               names_to = \"Month\",\n                               values_to = \"Amount\")\n\nkable(head(imports_region))\n\n\n\n\n\nRegion\nMonth\nAmount\n\n\n\n\nAmerica\n2023 Jan\n6267.4\n\n\nAmerica\n2022 Dec\n6901.5\n\n\nAmerica\n2022 Nov\n7529.4\n\n\nAmerica\n2022 Oct\n7666.4\n\n\nAmerica\n2022 Sep\n7995.9\n\n\nAmerica\n2022 Aug\n8633.8\n\n\n\n\n\n\n\nConverting to date\n%b refers to the abbreviation of the month\n\n\nPress to toggle code\nimports_region <- imports_region %>% \n        mutate(Month = as.Date(paste0(Month, \" 01\"), \n                               format = \"%Y %b %d\")) %>%\n        subset(Month < \"2023-01-01\")\nexports_region <- exports_region %>% \n        mutate(Month = as.Date(paste0(Month, \" 01\"), \n                               format = \"%Y %b %d\")) %>%\n        subset(Month < \"2023-01-01\")\nimports_country <- imports_country %>% \n        mutate(Month = as.Date(paste0(Month, \" 01\"), \n                               format = \"%Y %b %d\")) %>%\n        subset(Month < \"2023-01-01\")\nexports_country <- exports_country %>% \n        mutate(Month = as.Date(paste0(Month, \" 01\"), \n                               format = \"%Y %b %d\")) %>%\n        subset(Month < \"2023-01-01\")\n\nkable(head(imports_region))\n\n\n\n\n\nRegion\nMonth\nAmount\n\n\n\n\nAmerica\n2022-12-01\n6901.5\n\n\nAmerica\n2022-11-01\n7529.4\n\n\nAmerica\n2022-10-01\n7666.4\n\n\nAmerica\n2022-09-01\n7995.9\n\n\nAmerica\n2022-08-01\n8633.8\n\n\nAmerica\n2022-07-01\n7879.7\n\n\n\n\n\n\n\nMerging the data\n\n\nPress to toggle code\ntrade_region <- merge(imports_region, \n              exports_region, \n              by = c(\"Region\", \"Month\")) %>% \n              rename(\"Imports\" = \"Amount.x\",\n                     \"Exports\" = \"Amount.y\")\n\ntrade_country <- merge(imports_country, \n              exports_country, \n              by = c(\"Country\", \"Month\")) %>% \n              rename(\"Imports\" = \"Amount.x\",\n                     \"Exports\" = \"Amount.y\")\n\nkable(head(trade_region))\n\n\n\n\n\nRegion\nMonth\nImports\nExports\n\n\n\n\nAfrica\n2020-01-01\n528.6\n721.8\n\n\nAfrica\n2020-02-01\n666.1\n841.0\n\n\nAfrica\n2020-03-01\n559.4\n916.5\n\n\nAfrica\n2020-04-01\n372.6\n568.8\n\n\nAfrica\n2020-05-01\n409.6\n412.8\n\n\nAfrica\n2020-06-01\n238.2\n452.1\n\n\n\n\n\n\n\nPress to toggle code\ncolSums(is.na(trade_country))\n\n\nCountry   Month Imports Exports \n      0       0       0       0 \n\n\nPress to toggle code\ncolSums(is.na(trade_region))\n\n\n Region   Month Imports Exports \n      0       0       0       0 \n\n\n\n\nCalculating for the balance of trade\n\n\nPress to toggle code\ntrade_region <- trade_region %>% \n                mutate(Balance = Exports-Imports)\n\ntrade_country <-trade_country %>%\n                mutate(Balance = Exports-Imports)\n\nkable(head(trade_region))\n\n\n\n\n\nRegion\nMonth\nImports\nExports\nBalance\n\n\n\n\nAfrica\n2020-01-01\n528.6\n721.8\n193.2\n\n\nAfrica\n2020-02-01\n666.1\n841.0\n174.9\n\n\nAfrica\n2020-03-01\n559.4\n916.5\n357.1\n\n\nAfrica\n2020-04-01\n372.6\n568.8\n196.2\n\n\nAfrica\n2020-05-01\n409.6\n412.8\n3.2\n\n\nAfrica\n2020-06-01\n238.2\n452.1\n213.9"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#exploratory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#exploratory-data-analysis",
    "title": "Take-home Exercise 4",
    "section": "üìà Exploratory Data Analysis",
    "text": "üìà Exploratory Data Analysis\n\nLooking at the total\n\n\nPress to toggle code\nline_total <- trade_country %>% \n              subset(Country == \"Total\") %>%\n              ggplot(aes(x = Month)) + \n              geom_line(aes( y = Imports/1000),\n                        color = \"#cb6a82\",\n                        linewidth = 1) +\n              geom_line(aes( y = Imports/1000,\n                         text = paste(\"Month: \", \n                                      format(Month,\n                                             \"%B %Y\"),\n                                      \"\\nImports: $\",\n                                      format(Imports,\n                                             big.mark = \",\"))),\n                        color = \"#e3879e\") +\n              geom_line(aes( y = Exports/1000),\n                        color = \"#704276\",\n                        linewidth = 1) +\n              geom_line(aes( y = Exports/1000,\n                         text = paste(\"Month: \", \n                                      format(Month,\n                                             \"%B %Y\"),\n                                      \"\\nExports: $\",\n                                      format(Exports,\n                                             big.mark = \",\"))),\n                        color = \"#704276\")  +\n              labs (x = \"Date\",\n                    y = \"Trade Value ($ Millions)\",\n                    title = \"Total Singapore Import-Export Trade in Millions, 2020-2022\") + \n              scale_y_continuous(labels = scales::comma)\n\n\nggplotly(line_total, tooltip = \"text\") \n\n\n\n\n\n\n\n\nPress to toggle code\nbubble_region <- trade_region %>%\n                 ggplot(aes(x = Imports, \n                            y = Exports, \n                            size = Balance, \n                            color = Region)) + \n                  geom_point(show.legend = TRUE, \n                             alpha = 0.7) +\n                  scale_size(range = c(2, 12)) +\n                  transition_time(Month) +\n                  labs(title = \"Region: {format(frame_time,\n                                                '%B %Y')}\", \n                        x = \"Imports\", \n                        y = \"Exports\", \n                        fill = \"Region\") +\n                  theme(legend.position = \"bottom\") + \n                  theme_bw()\n\nanimate(bubble_region, \n        duration = 24)\n\n\n\n\n\n\n\nPress to toggle code\nasia <- c(\"Cambodia\", \"Hong Kong\", \"India\", \"Indonesia\", \n          \"Japan\", \"Laos People's Democratic Republic\", \n          \"Macau\", \"Mainland China\", \"Malaysia\", \"Myanmar\",\n          \"Nepal\",\"Philippines\",  \"Republic Of Korea\",\n          \"Taiwan\", \"Thailand\", \"Vietnam, Socialist Republic Of\" )\n\n\n\n\nPress to toggle code\nline_total <- trade_country %>% \n              subset(Country %in% asia) %>%\n              ggplot(aes(x = Month)) + \n              geom_line(aes( y = Imports),\n                        color = \"#cb6a82\",\n                        linewidth = 1) +\n              geom_line(aes( y = Exports),\n                        color = \"#704276\",\n                        linewidth = 1) +\n              geom_braid(aes(ymin = Imports, \n                             ymax = Exports,\n                             fill = Imports <\n                                    Exports),\n                          alpha = 0.5,\n                         show.legend = FALSE) +\n              labs (x = \"Date\",\n                    y = \"Trade Value ($ Thousands)\",\n                    color = \"Legend\",\n                    title = \"Total Singapore Import-Export Trade in Thousands, 2020-2022\") + \n              scale_y_continuous(labels = scales::comma) +\n              scale_fill_manual(values = c(\"#cb6a82\", \n                                           \"#704276\")) +\n              facet_wrap(~ Country)\n\nline_total"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex8/In-class_Ex8.html",
    "href": "In-class_Ex/In-class_Ex8/In-class_Ex8.html",
    "title": "In-class Exercise 8 - Modelling, Visualizing and Analysing Network Data with R",
    "section": "",
    "text": "This document serves as my In-class Exercise 8 requirement, following the fourth week of ISSS608 VAA lecture of Professor Kam on March 11, 2023.\n\n\nThe data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.\n\n\nThis consists of two weeks of 9063 emails correspondances between 55 employees.\n\n\n\n\n\n\n\n\nThis consists of the names, department and title of the 55 employees."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex8/In-class_Ex8.html#getting-started",
    "href": "In-class_Ex/In-class_Ex8/In-class_Ex8.html#getting-started",
    "title": "In-class Exercise 8 - Modelling, Visualizing and Analysing Network Data with R",
    "section": "üå± Getting Started",
    "text": "üå± Getting Started\n\nLoading required packages into the R environment\n\n\nPress to toggle code\npacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, clock, tidyverse)\n\n\n\n\n\n\n\n\nüì∞ EXTRA EXTRA!\n\n\n\nNot used in the this exercise but graphlayouts is another package with new layout algorithms to visualize networks which are not provided in iraph!\n\n\n\n\nLoading the data into the R environment\n\n\nPress to toggle code\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\nPress to toggle code\nglimpse(GAStech_nodes)\n\n\nRows: 54\nColumns: 4\n$ id         <dbl> 1, 2, 3, 4, 5, 6, 7, 44, 45, 46, 8, 9, 10, 11, 12, 13, 14, ‚Ä¶\n$ label      <chr> \"Mat.Bramar\", \"Anda.Ribera\", \"Rachel.Pantanal\", \"Linda.Lago‚Ä¶\n$ Department <chr> \"Administration\", \"Administration\", \"Administration\", \"Admi‚Ä¶\n$ Title      <chr> \"Assistant to CEO\", \"Assistant to CFO\", \"Assistant to CIO\",‚Ä¶\n\n\n\n\nPress to toggle code\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26‚Ä¶\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29‚Ä¶\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"‚Ä¶\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0‚Ä¶\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP‚Ä¶\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela‚Ä¶\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr‚Ä¶\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc‚Ä¶"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex8/In-class_Ex8.html#data-wrangling",
    "href": "In-class_Ex/In-class_Ex8/In-class_Ex8.html#data-wrangling",
    "title": "In-class Exercise 8 - Modelling, Visualizing and Analysing Network Data with R",
    "section": "üìÅ Data Wrangling",
    "text": "üìÅ Data Wrangling\n\nConverting ‚ÄòSentDate‚Äô to date datatype and weekday\n\n\nPress to toggle code\nGAStech_edges <- GAStech_edges %>%\n        mutate(SendDate = dmy(SentDate)) %>%\n        mutate(Weekday = wday(SentDate,\n                              label = TRUE,\n                              abbr = FALSE))\n\n\n\n\nAggregating to get connectivity attributes\n\n\nPress to toggle code\nGAStech_edges_aggregated <- GAStech_edges %>%\n              filter(MainSubject == \"Work related\") %>%\n              group_by(source, target, Weekday) %>%\n              summarise(Weight = n()) %>%\n              filter(source != target) %>%\n              filter(Weight > 1) %>%\n              ungroup()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex8/In-class_Ex8.html#network-objects-tidygraph",
    "href": "In-class_Ex/In-class_Ex8/In-class_Ex8.html#network-objects-tidygraph",
    "title": "In-class Exercise 8 - Modelling, Visualizing and Analysing Network Data with R",
    "section": "üñß Network Objects: Tidygraph",
    "text": "üñß Network Objects: Tidygraph\n\nUsing tbl_graph() to build tidygraph data model\n\n\nPress to toggle code\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\nGAStech_graph\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 √ó 4 (active)\n     id label               Department     Title                                \n  <dbl> <chr>               <chr>          <chr>                                \n1     1 Mat.Bramar          Administration Assistant to CEO                     \n2     2 Anda.Ribera         Administration Assistant to CFO                     \n3     3 Rachel.Pantanal     Administration Assistant to CIO                     \n4     4 Linda.Lagos         Administration Assistant to COO                     \n5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Manag‚Ä¶\n6     6 Carla.Forluniau     Administration Assistant to IT Group Manager        \n# ‚Ä¶ with 48 more rows\n#\n# Edge Data: 1,372 √ó 4\n   from    to Weekday Weight\n  <int> <int> <ord>    <int>\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ‚Ä¶ with 1,369 more rows\n\n\n\n\nChanging the active object\nThere are always two tables, one for nodes data and one for edges data. The previous tbl_graph data shows that node data is active. We can toggle or rather, explicitly activate using the edges table.\n\n\nPress to toggle code\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 √ó 4 (active)\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# ‚Ä¶ with 1,366 more rows\n#\n# Node Data: 54 √ó 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ‚Ä¶ with 51 more rows\n\n\n\n\n\n\n\n\nüí≠ TO REMEMBER!\n\n\n\nRemember to arrange or else the table will not know how to sort."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex8/In-class_Ex8.html#plotting-network-data",
    "href": "In-class_Ex/In-class_Ex8/In-class_Ex8.html#plotting-network-data",
    "title": "In-class Exercise 8 - Modelling, Visualizing and Analysing Network Data with R",
    "section": "üìç Plotting Network Data",
    "text": "üìç Plotting Network Data\n\n\nPress to toggle code\nggraph(GAStech_graph) +\n  geom_edge_link(color = '#e3879e') +\n  geom_node_point(color = '#cb6a82')\n\n\n\n\n\n\n\n\n\n\nCustomizing the network object plot\n\n\nPress to toggle code\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes(color = 'grey50')) +\n  geom_node_point(aes(color = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\nYou can also just choose a layout! It‚Äôs easy to switch from one to another.\n\n\nPress to toggle code\ng <- ggraph(GAStech_graph, \n            layout = \"star\") +\n  geom_edge_link(aes(color = '#e3879e')) +\n  geom_node_point(aes(color = '#cb6a82'))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\nModifying network nodes\n\n\nPress to toggle code\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(color = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\nModifying network edges\n\n\nPress to toggle code\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width = Weight), \n                 alpha = 0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(color = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\nUsing facets\n\nfacet_edges()\n\n\nPress to toggle code\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width = Weight), \n                 alpha = 0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\n\nPress to toggle code\nset_graph_style() \n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width = Weight), \n                 alpha = 0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\nfacet_nodes()\n\n\nPress to toggle code\nset_graph_style()\n\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width = Weight), \n                 alpha = 0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüîç LET‚ÄôS SEE!\n\n\n\nRemoving set_graph_style() makes your graphs ugly. Basically, node sizes will be weird, elements will go over their bounds and other layout issues will occur. So don‚Äôt remove it!"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex8/In-class_Ex8.html#network-metric-analysis",
    "href": "In-class_Ex/In-class_Ex8/In-class_Ex8.html#network-metric-analysis",
    "title": "In-class Exercise 8 - Modelling, Visualizing and Analysing Network Data with R",
    "section": "üñáÔ∏èNetwork Metric Analysis",
    "text": "üñáÔ∏èNetwork Metric Analysis\n\nComputing centrality indices\n\n\nPress to toggle code\ng <- GAStech_graph %>%\n  mutate(betweenness_centrality = centrality_betweenness()) %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width = Weight), \n                 alpha = 0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(color = Department,\n            size = betweenness_centrality))\ng + theme_graph()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex8/In-class_Ex8.html#interactive-network-graph-visnetwork",
    "href": "In-class_Ex/In-class_Ex8/In-class_Ex8.html#interactive-network-graph-visnetwork",
    "title": "In-class Exercise 8 - Modelling, Visualizing and Analysing Network Data with R",
    "section": "üß© Interactive Network Graph: visNetwork",
    "text": "üß© Interactive Network Graph: visNetwork\n\n\nPress to toggle code\nGAStech_edges_aggregated <- GAStech_edges %>%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %>%\n  rename(from = id) %>%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %>%\n  rename(to = id) %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(from, to) %>%\n    summarise(weight = n()) %>%\n  filter(from != to) %>%\n  filter(weight > 1) %>%\n  ungroup()\n\n\n\n\nPress to toggle code\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\n\n\nVery wiggly wiggly.\n\n\nPress to toggle code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n          visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\nPress to toggle code\n          # use full layout name!\n\n\n\nWorking with visual attributes\n\n\nPress to toggle code\nGAStech_nodes <- GAStech_nodes %>%\n  rename(group = Department) \n\n\n\n\nPress to toggle code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visLegend() %>%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#section",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#section",
    "title": "Take-home Exercise 4",
    "section": "",
    "text": "Press to toggle code\nasia <- c(\"Cambodia\", \"Hong Kong\", \"India\", \"Indonesia\", \n          \"Japan\", \"Laos People's Democratic Republic\", \n          \"Macau\", \"Mainland China\", \"Malaysia\", \"Myanmar\",\n          \"Nepal\",\"Philippines\",  \"Republic Of Korea\",\n          \"Taiwan\", \"Thailand\", \"Vietnam, Socialist Republic Of\" )"
  }
]