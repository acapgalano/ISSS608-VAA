[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nPress to toggle code\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "",
    "text": "This is a hands-on exercise following this guide as a requirement under the class ISSS608: Visual Analytics and Applications.\n\n\n\nImage taken from Intro R Workshop (ajsmit)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#installing-and-loading-required-packages",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#installing-and-loading-required-packages",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Installing and Loading Required Packages",
    "text": "Installing and Loading Required Packages\nThe function p_load() from pacman checks if inputted packages are already installed. If they are, they are loaded into the R environment. Otherwise, they are installed then loaded in. The code chunk below runs p_load() for tidyverse.\n\n\nPress to toggle code\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-the-data",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Importing the Data",
    "text": "Importing the Data\nThe code chunk below uses read.csv() to load in the CSV file ‚ÄúExam_data.csv‚Äù into the R environment.\n\n\nPress to toggle code\nexam_data <- read.csv('data/Exam_data.csv')\n\n\n\nExamining the data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#base-r-graphics-vs.-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#base-r-graphics-vs.-ggplot2",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Base R Graphics vs.¬†ggplot2",
    "text": "Base R Graphics vs.¬†ggplot2\n\n\nPress to toggle code\nhist(exam_data$MATHS, col ='#e3879e')\n\n\n\n\n\n\n\n\n\n\n\nPress to toggle code\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"#e3879e\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#exploring-geometric-objects",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#exploring-geometric-objects",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Exploring Geometric Objects",
    "text": "Exploring Geometric Objects\nGeometric objects refer to the actual marks placed on the plot. A plot must contain at least one geometric object in order to have an output. There‚Äôs no limit on the number of geometric objects, all you need to do is add them to the plot using +. The image below contains samples of geometric objects and their visualizations.\n\n\n\n\n\n\nBar Plot - geom_bar()\nThe code chunk below uses the geometric object geom_bar() which produces a bar plot of the frequencies of the variable ‚ÄòRACE‚Äô as specified by aes(x = RACE).\n\n\nPress to toggle code\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar(fill = '#e3879e')\n\n\n\n\n\n\n\n\n\n\n\nDot Plot - geom_dotplot()\nThe code chunk below makes use of the geometric object geom_dotplot() which produces a dot plot of the variable ‚ÄòMATHS‚Äô, which refers to math scores.\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5,         \n               dotsize = 0.5,\n               fill = '#e3879e') +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\nAs you can see geom_dotplot() makes use of two arguments, ‚Äòbinwidth‚Äô which refers to group ranges and ‚Äòdotsize‚Äô which scales the size of the dots. The function scale_y_continuous() is also added to turn off the y-axis by setting to NULL.\n\n\nHistogram - geom_histogram()\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 color=\"black\",      \n                 fill=\"#e3879e\")  \n\n\n\n\n\n\n\n\n\n\nModifying a geometric object by changing ‚Äôaes()‚Äô\n\n\nPress to toggle code\nggplot(data=exam_data, \n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20, \n                 color = \"grey30\") +\n  scale_fill_manual(values = c(\"#e3879e\",\"#af7cb6\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüí°ADDITIONAL NOTES\n\n\n\nYou can set specific fill colors using scale_fill_manual(). Just input your vector of colors in the ‚Äòvalues‚Äô argument.\n\n\n\n\n\nKernel Density Estimation - geom_density()\n\n\nPress to toggle code\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\nBox Plot - geom_boxplot()\n\n\nPress to toggle code\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\nCombining geometric objects\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() +              #<<      \n  geom_point(position=\"jitter\", #<<\n             size = 0.5)        #<<\n\n\n\n\n\n\n\n\n\n\n\nWorking with stat_summary()\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y = \"mean\",         \n               colour = \"red\",        \n               size=4)               \n\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\n‚Ñπ Please use the `fun` argument instead.\n\n\n\n\n\n\n\n\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(y = MATHS, x =  GENDER)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",        \n             fun.y =\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`\n\n\n\n\n\n\n\n\nScatter Plot - geom_point()\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\nGetting the best fit curve on a scatter plot\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5)\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n‚Ñπ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-facets",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-facets",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Working with Facets",
    "text": "Working with Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data.\nFacets are an alternative to aesthetics for displaying additional discrete variables."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#using-facet-wrap",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#using-facet-wrap",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Using facet-wrap()",
    "text": "Using facet-wrap()\nThe code chunk below produces a 2D matrix of ‚ÄòMATHS‚Äô histograms as grouped by variable ‚ÄòCLASS‚Äô using facet_wrap(~ CLASS) .\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nüíª CODE REVIEW!\n\n\n\nThe function facet_wrap() takes in the argument ‚Äòfacets‚Äô which pertains to the facet groups. The documentation states that it can accept either formulas or character vectors.\nThe operator ~ is used to define the relationship between dependent variable and independent variables in a formula; it separates the lefthand side and righthand side. The argument ‚Äòfacets‚Äô accepts formulas, and by using the code snippet ~ CLASS we are defining a one-sided formula."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#using-facet_grid",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#using-facet_grid",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Using facet_grid()",
    "text": "Using facet_grid()\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\nHow do we create a trellis box plot of math scores per class grouped by gender?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER)\n\n\n\n\n\n\n\n\n\n\nHow do we put one panel on top of the other?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() + \n  facet_wrap(~ GENDER, nrow = 2, strip.position = \"right\")\n\n\n\n\n\n\n\n\n\nThe argument ‚Äòstrip.position‚Äô sets the position of the facet group‚Äôs strip label.\n\nHow do we group by both ‚ÄòCLASS‚Äô and ‚ÄòGENDER‚Äô?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() + \n  facet_grid(GENDER ~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-coordinates",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Working with Coordinates",
    "text": "Working with Coordinates"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-themes",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-themes",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Working with Themes",
    "text": "Working with Themes\n\nHow do you create a horizontal bar graph with a light blue background?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n   theme(panel.background = element_rect(fill = \"lightblue\",\n                                         color = \"white\"))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#designing-data-drive-graphics-for-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#designing-data-drive-graphics-for-analysis",
    "title": "Hands-on Exercise 1: Programming Elegant DataVis with ggplot2",
    "section": "Designing Data-drive Graphics for Analysis",
    "text": "Designing Data-drive Graphics for Analysis\n\nHow do you improve a normal bar chart?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() \n\n\n\n\n\n\n\n\n\n\nHow do we add mean and median lines on the histogram plot and change fill colors?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 color = \"black\",      \n                 fill = \"lightblue\") +\n  geom_vline(aes(xintercept = mean(MATHS)),\n             col = 'red',\n             size = 0.5,\n             linetype = \"dashed\")+ \n  geom_vline(aes(xintercept = median(MATHS)),\n             col = 'black',\n             size = 0.5,\n             linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\n\nHow do you have a histogram show the distribution of English scores for all pupils in the background?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = ENGLISH,\n           fill = GENDER)) +\n  geom_histogram(bins = 20,\n                 color = \"black\") + \n  facet_wrap(~ GENDER)\n\n\n\n\n\n\n\n\n\n\nHow to create a scatter plot with reference lines?\n\n\n\nPress to toggle code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() + \n  geom_vline(aes(xintercept = 50),\n             col = 'grey',\n             size = 0.8,\n             linetype = \"dashed\") + \n  geom_hline(aes(yintercept = 50),\n             col = 'grey',\n             size = 0.8,\n             linetype = \"dashed\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html",
    "title": "In-class Exercise 2: Creating Eelegant Graphics with ggplot2",
    "section": "",
    "text": "This document serves as my In-class Exercise 2 requirement, following the second week of ISSS608 VAA lecture of Professor Kam on January 21, 2023.\n\n\nTidyverse is a collection of packages that (as named) is used to tidy data in the field of data analytics. The tidyverse packages and workflow are shown below.\n\n\n\nFigure taken from [Hands-on Exercise 1 slides of ISSS608 course page](https://isss608-ay2022-23jan.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01-ggplot2#/4)\n\n\nIn this In-class Exercise, we make use of tidyverse, especially the included package ggplot2 to explore the different graphics that can be designed and how they can be customized.\n\n\n\nThe data consists of exam scores of students from different classes for different subjects, namely,"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#loading-the-required-packages",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#loading-the-required-packages",
    "title": "In-class Exercise 2: Creating Eelegant Graphics with ggplot2",
    "section": "Loading the required packages",
    "text": "Loading the required packages\nThe function p_load() from pacman checks if inputted packages are already installed. If they are, they are loaded into the R environment. Otherwise, they are installed then loaded in. The code chunk below runs p_load() for tidyverse.\n\n\nPress to toggle code\npacman::p_load(tidyverse)\n\n\n\n\n\n\n\n\nüíª CODE REVIEW!\n\n\n\n\nWhy do we"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-the-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_Ex2.html#importing-the-data",
    "title": "In-class Exercise 2: Creating Eelegant Graphics with ggplot2",
    "section": "Importing the data",
    "text": "Importing the data\nThe code chunk below uses read.csv() to load in the CSV file ‚ÄúExam_data.csv‚Äù into the R environment.\n\n\nPress to toggle code\nexam_data <- read.csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html",
    "title": "In-class Exercise 3 - Interactive Data Visualisation",
    "section": "",
    "text": "This document serves as my In-class Exercise 3 requirement, following the second week of ISSS608 VAA lecture of Professor Kam on January 28, 2023.\n\n\nThis in-class exercise aims to add interactivity to our visualizations."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#tableau",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#tableau",
    "title": "In-class Exercise 3 - Interactive Data Visualisation",
    "section": "Tableau",
    "text": "Tableau\n\nSuperstore Data\nThis section builds on the Tableau workbook from In-class Exercise 1.\n\nFilters\nBy dragging Order Date to Filters, we can filter the data by date, particularly by year. By making the filter a single list, we end up with the output below.\n\n\n\n\n\n\n\nAdding a graph to tooltip\nBy editing the Tooltip function, you can add a sheet (or graph) to the tooltip. Adding the line <Sheet name=\"Annual Sales vs. Profit\" maxwidth=\"300\" maxheight=\"300\" filter=\"<All Fields>\"> and hovering over a point will produce the tooltip shown below.\n\n\n\n\n\nThe output dashboard is embedded below. It can also be found on Tableau Public here.\n\n                   \n\n\n\nExam Data\nThe data consists of exam scores of students for English and Maths.\n\nCreate base graphs\nBefore creating the goal dashboard, we need to prepare two boxplots (one for English, one for Maths) and a scatterplot (English vs.¬†Maths). They are created by using the ID as Detail. The Maths boxplot will reverse the rows and columns.\n\n\nUsing actions on dashboards\nTableau allows us to add Actions to dashboards. One useful action in particular is Highlight, which highlights certain points, and grays out the rest.\n\n\n\n\n\nThe highlighting output should look like the screenshot below.\n\n\n\n\n\nThe output dashboard is embedded below. It can also be found on Tableau Public here."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#r",
    "href": "In-class_Ex/In-class_Ex3/In-class_Ex3.html#r",
    "title": "In-class Exercise 3 - Interactive Data Visualisation",
    "section": "R",
    "text": "R\n\nGetting Started\n\nInstalling and loading R packages\nThe code chunk below installs and loads the packages ggiraph and tidyverse into the R environment.\n\n\nPress to toggle code\npacman::p_load(ggiraph, tidyverse)\n\n\n\n\n\nImporting the data\nThe code chunk below imports the CSV file ‚ÄúExam_data.csv‚Äù into the R environment as a tibble.\n\n\nPress to toggle code\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\n\nCreating graphs using ggplot2\n\nStatic geom_dotplot()\n\n\nPress to toggle code\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5, \n               fill = '#e3879e')\n\n\n\n\n\n\n\n\n\n\n\nInteractive geom_dotplot_interactive()\nBy using the code chunk below, we can create the same graph from above with the addition of a tooltip. Hovering over points will output the student ID as well.\n\n\nPress to toggle code\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\",\n    fill = '#e3879e') +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608: Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to my journey in ISSS608: Visual Analytics and Applications."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1 - Age-Sex Pyramid",
    "section": "",
    "text": "This document serves as a submission for Take-home Exercise 1 as required by the course ISSS608 Visual Analytics and Applications.\n\n\nHow do we analyze population trends? One common graphical representation is the age-sex pyramid, also known as the population pyramid. It reveals the past and present of one‚Äôs population, and gives an idea of the mortality and fertility rates of a country. In this exercise, we use Tableau to create age-sex pyramids of nine planning areas of Singapore in a single view using a trellis chart.\n\n\n\nFor this exercise, we used the ‚ÄúSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022‚Äù dataset available from the Department of Statistics, Singapore.\n\n\n\nScreenshot of the dataset source from SingStat\n\n\nThe dataset consists of the following data:\n\nPlanning Area (PA)\nSubzone (SZ)\nAge Group (AG)\nSex\nType of Dwelling (TOD)\nPopulation (Pop)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#setting-up-the-trellis-chart",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#setting-up-the-trellis-chart",
    "title": "Take-home Exercise 1 - Age-Sex Pyramid",
    "section": "Setting up the trellis chart",
    "text": "Setting up the trellis chart\nFollowing the guide by Luke Stanke called ‚ÄúTrellis Chart in Tableau‚Äù, we can setup our trellis through the following steps.\n\nSelect Create Calculated field from the Data pane. Create a calculated field called Index and type INDEX() as the calculation.\nCreate a parameter called Total Columns and set it as 3.\n\n\n\n\n\nCreate another calculated field called Column and set it as ([Index] - 1) % [Total Columns] . Similarly, create a calculated field called Row and set it as (([Index] - 1) - [Column]) / [Total Columns]).\nWe should end up with the following measures and parameters.\n\n\n\n\n\n\n\nDrag Column and Row to Columns and Rows respectively. Drag PA and Index to Detail. At this point, we have our skeleton for the trellis chart."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#adding-the-data-and-creating-the-base-pyramid",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#adding-the-data-and-creating-the-base-pyramid",
    "title": "Take-home Exercise 1 - Age-Sex Pyramid",
    "section": "Adding the data and creating the base pyramid",
    "text": "Adding the data and creating the base pyramid\n\nNow to get to the fun part. First we create two more calculated fields: Female set as SUM(IF [Sex] = 'Females' THEN [Pop]END) , and Male set as SUM(IF [Sex] = 'Males' THEN [Pop]END).\nWe then drag these two new fields into Columns. We should get bar graphs similar to figure below.\n\n\n\n\n\n\n\nThat doesn‚Äôt look right! To create the pyramid shape of we‚Äôre familiar with, we need to use Edit Axis on the Male side of the axis and tick ‚ÄúReversed‚Äù under ‚ÄúScale‚Äù as shown below.\n\n\n\n\n\n\nNow we have the right shape! But something is still missing‚Ä¶\n\n\n\n\n\n\nDrag the Sex field into the Color mark to differentiate the male and female bars. In this case, blue and red were used respectively.\n\n\n\n\n\n\n\nNow some planning areas seem to have empty cells. Specifically, by filtering the PA, we find out that there are 14 planning areas with 0 population.\n\n\n\n\n\n\nTo fix this, we drag the PA field into Filter and set the condition as shown in the dialog box below.\n\n\n\n\n\nNow we should have only displayed Age-Sex pyramids for those planning areas with population data."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#other-formatting-specifications",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#other-formatting-specifications",
    "title": "Take-home Exercise 1 - Age-Sex Pyramid",
    "section": "Other formatting specifications",
    "text": "Other formatting specifications\n\nSince we‚Äôre limited by the number of age-sex pyramids seen in one view (without scrolling), it‚Äôs important to display the more relevant planning areas first. In this case, we will be sorting the sizes of the population from greatest to least so the planning areas with the largest population sizes according to the dataset will be shown first.\nTo do this, we sort PA by the Pop field as shown in the screenshot below.\n\n\n\n\n\n\n\nTo limit the number of rows, we can filter Row to be set from 0 to 2.\n\n\n\n\n\n\nAs shown below, the row only goes as far as index = 2, making it a 3x3 trellis chart.\n\n\n\n\n\n\nTo remove the Column and Row headers, we untick Show Header to exclude the column and row numbers.\n\n\n\n\n\n\n\nTo add a label for planning areas, we can right click the lowest bar, and press Annotate \\(\\rightarrow\\) Mark to create a label. Set it as <PA> to display the planning area.\n\n\n\n\n\n\nRemember to remove the Shading and Line to keep the text as is.\n\n\n\n\n\nThe figure below shows the different pyramids labelled with their respective planning areas.\n\n\nTo fix the axis describing the population values, we set the tick marks as shown in the screenshot below.\n\n\n\n\n\n\n\nLast but not the least, we reverse the order of the Age Group values so that it decreases from older to younger.\n\n\n\n\n\n\n\n\nüå∏ PERSONAL COMMENTS\n\n\n\nI almost forgot to do this step, and that‚Äôs why it‚Äôs last in the order. üòÖ\n\n\nThe finished product can be found on Tableau Public. A sample is embedded below, however formatting is affected by the width restrictions of the page. A still image of the dashboard can be found in the next section."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#the-pattern-of-the-population-pyramids",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#the-pattern-of-the-population-pyramids",
    "title": "Take-home Exercise 1 - Age-Sex Pyramid",
    "section": "The pattern of the population pyramids",
    "text": "The pattern of the population pyramids\nWhile each pyramid has slight differences, a recurring observation from each pyramid is that the larger populations are around the middle ages (40-70s). According to National Geographic, this type is called ‚ÄúConstrictive‚Äù and means that these areas have relatively low fertility rates and high life expectancy. The trend states that the population is aging.\nTaking a look at some specific age-sex pyramids, we observe that Punggol has the most unique shape. Since Punggol is relatively newer in the township development aspect, it makes sense that mostly people in their late 30‚Äôs to early 40‚Äôs are moving there. It is reportedly popular for homebuyers, which people in their 20‚Äôs are usually not. With this, it also makes sense that these people are starting their families, therefore younger children are more present than teens and young adults.\nThough on opposite sides of Singapore, Bedok and Jurong West are the closest to having a perfect constrictive shape. Bedok is a mature residential estate and Jurong West is non-mature."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#what-this-means-for-singapore",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#what-this-means-for-singapore",
    "title": "Take-home Exercise 1 - Age-Sex Pyramid",
    "section": "What this means for Singapore",
    "text": "What this means for Singapore\nConstrictive population pyramids are usually a sign of a developed country with high economic development. Good healthcare leads to higher life expectancy and quality education is linked to lower fertility rates. However, with the aging population comes concerns about caring for the elderly and the eventual lack of manpower.\n\n\n\nScreenshot of Singapore population and growth rate from WorldOMeter\n\n\nAs suggested by the pyramids, the growth rate of Singapore is slowing down. This is confirmed by the population and growth rate graphs above. For the population graph, we can see that the curve is slowly flattening out. The growth rate is explicitly dropping since before 2010. Measures may need to be taken to encourage an increase in fertility rates."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "",
    "text": "This document serves as a submission for Take-home Exercise 2 as required by the course ISSS608 Visual Analytics and Applications.\nIn this exercise, we aim to apply the different data visualization design practices and principles and improve on the Take-home Exercise 1 output of a fellow classmate.\n\n\nHow do we analyze population trends? One common graphical representation is the age-sex pyramid, also known as the population pyramid. It reveals the past and present of one‚Äôs population, and gives an idea of the mortality and fertility rates of a country. In this exercise, we used Tableau to create age-sex pyramids of nine planning areas of Singapore in a single view using a trellis chart.\nThe dataset used was ‚ÄúSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022‚Äù, which is available from the Department of Statistics, Singapore."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "üìã Getting Started",
    "text": "üìã Getting Started\nIn this section, we focus on preparing our R environment for the task at hand.\n\nLoading the required packages\nThe code chunk below loads our favorite package, tidyverse into the R environment. Once again, tidyverse is a collection of packages that will help with all the data and visualizations.\n\n\nPress to toggle code\npacman::p_load(tidyverse)\n\n\n\n\nLoading the data into the R environment\nUsing read_csv(), we load our data set ‚Äòrespopagesextod2022.csv‚Äô into the R environment as a tibble.\n\n\nPress to toggle code\npop_data <- read_csv(\"data/respopagesextod2022.csv\")\n\n\nWe have 10,098 rows and 7 columns, namely: ‚ÄòPA‚Äô, ‚ÄòSZ‚Äô, ‚ÄòAG‚Äô, ‚ÄòSex‚Äô, ‚ÄòTOD‚Äô, ‚ÄòPop‚Äô, and ‚ÄòTime‚Äô. For this exercise, we don‚Äôt need several of these rows (only focusing on Top 9 populated planning areas) and columns (‚ÄòSZ‚Äô, ‚ÄòTOD‚Äô, and ‚ÄòTime‚Äô are unnecessary).\n\n\nPreparing the data\nThe code chunk below uses the functions group_by() and summarise() to sum the ‚ÄòPop‚Äô of the rows grouped by ‚ÄòPA‚Äô, ‚ÄòAG‚Äô and ‚ÄòSex‚Äô. This creates a new tibble with just ‚ÄòPA‚Äô, ‚ÄòAG‚Äô, ‚ÄòSex‚Äô and collated sum of ‚ÄòPop‚Äô (shown as ‚Äòsum(Pop)‚Äô) as columns.\n\n\nPress to toggle code\npop_data <- pop_data %>% \n            group_by(PA, AG, Sex) %>% \n            summarise(sum(Pop))\n\nhead(pop_data)\n\n\n# A tibble: 6 √ó 4\n# Groups:   PA, AG [3]\n  PA         AG       Sex     `sum(Pop)`\n  <chr>      <chr>    <chr>        <dbl>\n1 Ang Mo Kio 0_to_4   Females       2480\n2 Ang Mo Kio 0_to_4   Males         2530\n3 Ang Mo Kio 10_to_14 Females       3320\n4 Ang Mo Kio 10_to_14 Males         3350\n5 Ang Mo Kio 15_to_19 Females       3620\n6 Ang Mo Kio 15_to_19 Males         3780\n\n\n\n\n\n\n\n\nüíª CODE REVIEW!\n\n\n\nWhat does %>% do?\nIt‚Äôs an operator that is part of the dplyr package that passes the left-hand side of the operator as the first argument of the function on the right-hand side.\n\n\nFor ease of use, we rename ‚Äòsum(Pop)‚Äô as ‚ÄòPop‚Äô using colnames().\n\n\nPress to toggle code\ncolnames(pop_data) <- c(\"PA\", \"AG\", \"Sex\", \"Pop\")\n\n\nNow to get just the top 9 most populated planning areas, we use the function top_n(). First however, we run pop_data %>% group_by(PA) %>%  summarise(sum(Pop)) to create a tibble with just the total populations of all the planning areas and use it as the first argument of top_n(). The second argument is the number of top elements, and the third argument is the column or variable to base the ranking on, which is ‚Äòsum(Pop)‚Äô. Adding the $PA at the end of the argument allows us to take only the names of the planning areas.\n\n\nPress to toggle code\ntop_9 <- top_n(pop_data %>% \n              group_by(PA) %>% \n              summarise(sum(Pop)), \n              9, \n              `sum(Pop)`)$`PA`\n\n\nNow with the list of planning areas, we can filter() our data to only the top 9 most populated ones.\n\n\nPress to toggle code\ntop_9_data <- filter(pop_data, PA %in% as.vector(top_9))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#dataviz-makeover",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#dataviz-makeover",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "üñåÔ∏è DataViz Makeover",
    "text": "üñåÔ∏è DataViz Makeover\nIn this section, we go over the subject of the improvements, what can be improved, and how we build the new visualization on R.\n\nIntroducing the age-sex pyramid to critique\nThis visualization was taken from Take-home_Ex01_Dashboard | Tableau Public.\n\n\n\n\n\nFrom first impression, there are several observations to give feedback on.\n\nThere‚Äôs a lot going on. There‚Äôs a lot of graphs, a lot of bars, and lots of numbers that aren‚Äôt very clear. The numerical labels also tend to block the visuals of the bar graph, making it hard to distinguish the edges. For the sake of the assignment as well, it does not seem necessary to include the age-sex pyramid of the whole Singapore, and population of each planning area. The gray bars seem to be the total population of each age group used to compare to each of the sexes, however, it also seems very unnecessary to the purpose of the age-sex pyramid. The label of ‚ÄúPlanning Area‚Äù is also just taking up space, but it should be clear that the strip names are the planning areas from the title.\n\nThe unit of measurement. While there are age-sex pyramids that use the actual population values, it may be easier to digest percentages compared to looking at large values. It also helps the axis labels look cleaner. Using percentages should not take away from the structure of the pyramid.\nThe trellis chart is one row and affects the pyramids. Because all nine age-sex pyramids are lined up in a row, the bars become compressed. They now give the wrong impression, appearing more like a ‚Äústationary‚Äù structure rather than ‚Äúconstrictive- basically it affects the shape, therefore affecting the interpretation.\nThe ‚ÄòAge Group‚Äô axis labels. While still very much readable, the presence of the underscores (‚Äò_‚Äô) are unsightly.\n\nWith these in mind, we can start building our new age-sex pyramid trellis chart.\n\n\nChanging the unit of measurement\nIn order to get change the axis to percentages, there are some revisions to be made to our top_9_data tibble. By using aggregate() we can get the total population for each planning area. After joining that tibble to top_9_data to add a ‚ÄòTotal‚Äô column, we can add a new column using mutate() that computes for the ‚ÄòPercentage‚Äô using ‚ÄòPop‚Äô over ‚ÄòTotal‚Äô.\n\n\nPress to toggle code\ntop_9_sum <- setNames(aggregate(x = top_9_data$Pop,\n                            by = list(top_9_data$PA),\n                            FUN = sum),\n                            c(\"PA\",\"Total\"))\n\ntop_9_data <- top_9_data %>% \n        left_join(top_9_sum, \n                  by='PA') %>% \n        mutate(`Percentage` = `Pop`/`Total`)\n\nglimpse(top_9_data)\n\n\nRows: 342\nColumns: 6\nGroups: PA, AG [171]\n$ PA         <chr> \"Bedok\", \"Bedok\", \"Bedok\", \"Bedok\", \"Bedok\", \"Bedok\", \"Bedo‚Ä¶\n$ AG         <chr> \"0_to_4\", \"0_to_4\", \"10_to_14\", \"10_to_14\", \"15_to_19\", \"15‚Ä¶\n$ Sex        <chr> \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Males\",‚Ä¶\n$ Pop        <dbl> 4970, 5090, 6220, 6440, 6660, 6770, 7310, 7860, 8820, 9060,‚Ä¶\n$ Total      <dbl> 278640, 278640, 278640, 278640, 278640, 278640, 278640, 278‚Ä¶\n$ Percentage <dbl> 0.01783664, 0.01826730, 0.02232271, 0.02311226, 0.02390181,‚Ä¶\n\n\n\n\n\n\n\n\nüíªCODE REVIEW!\n\n\n\nThe function glimpse is used to present each column in the dataframe.\n\n\n\n\nFixing the Age Group values\nBy running the function str_replace(), we change the substring ‚Äú_to_‚Äù to ‚Äù - ‚Äú, effectively removing the underscores. We also change‚Äù90_and_over‚Äù to ‚Äú> 90‚Äù for easy comprehension.\n\n\nPress to toggle code\ntop_9_data$AG <- str_replace(top_9_data$AG, \"_to_\", \" - \")\n\ntop_9_data$AG <- str_replace(top_9_data$AG, \"90_and_over\", \"> 90\")\n\n\n\n\n\n\n\nBuilding the base age-sex pyramid\nThe code chunk below gets us started with building our age-sex pyramid. Each geom_bar() is divided into a subset that is filtered by sex. We use coord_flip() to reverse the x and y axis.\n\n\nPress to toggle code\nggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity') + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity') +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nNow we have the issue of the two bars representing males and females overlapping each other. To solve this, we change the ‚ÄòPercentage‚Äô values for ‚ÄúMales‚Äù to be negative using the code chunk below.\n\n\nPress to toggle code\ntop_9_data <- top_9_data %>%\n  mutate(Percentage = ifelse(Sex == \"Males\", \n                             -Percentage, \n                             Percentage))\nhead(top_9_data)\n\n\n# A tibble: 6 √ó 6\n# Groups:   PA, AG [3]\n  PA    AG      Sex       Pop  Total Percentage\n  <chr> <chr>   <chr>   <dbl>  <dbl>      <dbl>\n1 Bedok 0 - 4   Males    5090 278640    -0.0183\n2 Bedok 0 - 4   Females  4970 278640     0.0178\n3 Bedok 5 - 9   Males    5960 278640    -0.0214\n4 Bedok 5 - 9   Females  5700 278640     0.0205\n5 Bedok 10 - 14 Males    6440 278640    -0.0231\n6 Bedok 10 - 14 Females  6220 278640     0.0223\n\n\nThere‚Äôs also the issue of the age group ‚Äú5-9‚Äù appearing between ‚Äú45-49‚Äù and ‚Äú50-54‚Äù due to alphabetical sorting of the strings. To fix this, we declare a vector with the right arrangement of the age group categories.\n\n\n\n\n\n\nüå∏ PERSONAL COMMENTS!\n\n\n\nThis was not done manually. I ran unique(top_9_data$AG), copy-pasted it and moved ‚Äú5-9‚Äù to the right position.\n\n\n\n\nPress to toggle code\nAG_sort = c(\"0 - 4\",\"5 - 9\",\"10 - 14\", \"15 - 19\", \"20 - 24\", \"25 - 29\", \"30 - 34\", \"35 - 39\", \"40 - 44\", \"45 - 49\",\"50 - 54\",\"55 - 59\",\"60 - 64\",\"65 - 69\",\"70 - 74\",\"75 - 79\", \"80 - 84\",\"85 - 89\",\"> 90\")\n\n\nNow with the changes made above, we can try running our ggplot model again with a few new changes. First we have scale_y_continuous() which we use to fix the percentage labels. Then we have scale_x_discrete() to set ‚Äòlimits‚Äô to follow AG_sort.\n\n\nPress to toggle code\nggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity') + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity') +\n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \n                                     \"%\"),\n                    limits = c(-0.6, 0.6)) + # new \n  scale_x_discrete(limits = AG_sort) + # new\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nCreating a 3x3 trellis chart\nNow we‚Äôre ready to turn our single row trellis chart to one that is distributed evenly as a 3x3 chart. Fortunately, ggplot2 provides a function called facet_wrap() which allows us to generate panels for each planning area.\n\n\nPress to toggle code\nggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity') + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity') +\n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \"%\"),\n                        limits = c(-0.06, 0.06)) + \n  scale_x_discrete(limits = AG_sort) +\n  coord_flip() + \n  facet_wrap(~ PA, nrow = 3) # newly added line\n\n\n\n\n\nNow we can clearly see the shape of each of the pyramids.\n\n\nFixing axis and legend details\nThe ‚ÄòAge Group‚Äô labels seem to be a bit too compressed. Our legend is also unnecessarily large. Using theme() and setting element_text() we can format the different text in our chart.\n\n\nPress to toggle code\nggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity') + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity') +\n  \n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \"%\"),\n                    limits = c(-0.06, 0.06),\n                    breaks = seq(-0.06,0.06, by = 0.02)) + \n  scale_x_discrete(limits = AG_sort) +\n  \n  coord_flip() + \n  \n  theme(axis.text = element_text(size = 7),\n        axis.title = element_text(size = 9),\n        legend.text = element_text(size = 8),\n        legend.title = element_text(size = 9)) + \n  \n  xlab(\"Age Group\") + \n  \n  facet_wrap(~ PA, nrow = 3)\n\n\n\n\n\n\n\nAdding a title and caption\nThis is an important part of any graph, chart or visualization. While it‚Äôs important to show and not tell, it‚Äôs important to set the context of what the person is viewing. Using labs() we can set the ‚Äòtitle‚Äô, ‚Äòsubtitle‚Äô and ‚Äòcaption‚Äô as shown.\n\n\nPress to toggle code\nggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity') + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity') +\n  \n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \"%\"),\n                    limits = c(-0.06, 0.06),\n                    breaks = seq(-0.06,0.06, by = 0.02)) + \n  scale_x_discrete(limits = AG_sort) +\n  coord_flip() + \n  \n  theme(axis.text = element_text(size = 7),\n        axis.title = element_text(size = 9),\n        legend.text = element_text(size = 8),\n        legend.title = element_text(size = 9),\n        plot.title = element_text(size = 14,\n                                  face = \"bold\"), # new\n        plot.subtitle = element_text(size = 10), #new\n        plot.caption = element_text(size = 6), #new\n        strip.text = element_text(size = 8)) +  #new\n  \n  xlab(\"Age Group\") + \n  ylab(\"Percentage (%)\") + \n  labs(title = \"Age-Sex Pyramid of Top 9 Most Populated Planning Areas, 2022\", #new\n       subtitle = \"Age group distribution of percentage population for males and females in nine of the most populated planning areas in Singapore\", #new\n       caption =\"Data Soruce: Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 (Singapore Department of Statistics (DOS))\")  + #new\n  facet_wrap(~ PA, nrow = 3)\n\n\n\n\n\n\n\nChanging the theme to be more visually appealing\nBy adding theme_bw() (from the given theme elements) we get a cleaner grid and sharper panels. The fill colors for the ‚ÄòSex‚Äô were also changed using scale_fill_manual().\n\n\n\n\n\n\n‚ùó TAKE NOTE!\n\n\n\nThe order of the placement of theme_bw() or any other pre-made theme elements could ruin your customized formats. In this case, I placed it before theme(), otherwise it would override the changes I made to the title and subtitle text.\n\n\n\n\nPress to toggle code\nggplot(top_9_data, aes(x = AG, \n                       y = Percentage, \n                       fill = Sex)) + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Males\"), \n           stat = 'identity') + \n  geom_bar(data = subset(top_9_data, \n                         Sex == \"Females\"), \n           stat = 'identity') +\n  \n  scale_y_continuous(labels = function(x) paste0(abs(x*100), \"%\"),\n                    limits = c(-0.06, 0.06),\n                    breaks = seq(-0.06,0.06, by = 0.02)) + \n  scale_x_discrete(limits = AG_sort) +\n  coord_flip() + \n  \n  theme_bw() + # new\n  \n  theme(axis.text = element_text(size = 7),\n        axis.title = element_text(size = 9),\n        legend.text = element_text(size = 8),\n        legend.title = element_text(size = 9),\n        plot.title = element_text(size = 14,\n                                  face = \"bold\"), \n        plot.subtitle = element_text(size = 10,\n                                     face = \"italic\"), \n        plot.caption = element_text(size = 6), \n        strip.text = element_text(size = 8)) +  \n  \n  xlab(\"Age Group\") + \n  ylab(\"Percentage (%)\") + \n  labs(title = \"Age-Sex Pyramid of Top 9 Most Populated Planning Areas, 2022\", \n       subtitle = \"Age group distribution of percentage population for males and females in nine of the most populated planning areas in Singapore\", \n       caption =\"Data Soruce: Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 (Singapore Department of Statistics (DOS))\")  + \n\n  scale_fill_manual(values=c(\"#ff63a4\", # new\n                             \"#2d74f7\")) + # new\n  facet_wrap(~ PA, nrow = 3)\n\n\n\n\n\nWith this we have our final product."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#remarks-and-recommendations",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#remarks-and-recommendations",
    "title": "Take-home Exercise 2: DataVis Makeover",
    "section": "üí¨ Remarks and Recommendations",
    "text": "üí¨ Remarks and Recommendations\n\nI limited the part to work on to just the trellis chart and did not include the full Singapore pyramid and planning area population bar graphs.\nI originally wanted to recreate the entire graph of whichever Take-home Exercise 1 I would choose, but then I realized at some point that I wouldn‚Äôt be able to fully recreate them in R (or at least I wouldn‚Äôt know how to). And so I opted to just build from the ground up.\nIf this were not a trellis chart, it may be possible to explore placing the ‚ÄòAge Group‚Äô axis in between the Males and Females bars. However, in a trellis chart, it may seem repetitive to have it in every panel.\nAnother thing that I feel like would be okay if not for the trellis chart format is adding the percentage labels. I opted to not add it now because the graphs would seem too cluttered. It‚Äôs also less likely that the labels would be seen anyway.\nIt was only after I had worked on the code that I realized we were ideally not supposed to make any changes to the dataset. I‚Äôm unsure if converting to percentages counts, but if it does, then that was my mistake."
  }
]