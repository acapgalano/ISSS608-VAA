---
title: "In-class Exercise 4: Interactivity and Statistical Analysis"
author: "Anica Clarice Antonella P. Galano (acapgalano)"
date: 4 February 2023
date-modified: "`r Sys.Date()`"
execute:
  warning: false
format: html
editor: visual
---

## üîç Overview

This document serves as my In-class Exercise 4 requirement, following the fourth week of ISSS608 VAA lecture of Professor Kam on February 4, 2023.

## üå± Getting Started

### Installing packages into the R environment

```{r}
pacman::p_load(ggiraph, plotly, DT, patchwork, crosstalk, ggstatsplot, readxl, performance, parameters, see, ggdist, tidyverse)
```

### Loading the data into the R environment

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## üöÄ Exploring the **`plotly`** Package

### Creating our first basic plot

```{r}
plot_ly(
  data = exam_data,
  x = ~ENGLISH,
  y = ~MATHS,
  color = ~RACE
)
```

We can observe that by default we are given a tooltip containing the pair of 'ENGLISH' and 'MATHS' scores. More into interactivity, several functions are provided by the new plot at the top right corner.

### Creating an alternative `ggplot` plot with `plotly`

```{r}
p <- ggplot(data = exam_data,
            aes( x = MATHS,
                 y = ENGLISH)) + 
  geom_point(dotsize = 1) + 
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))
ggplotly(p)
```

::: {.callout-note icon="false"}
## üéì MORAL OF THE STORY

Use **`ggplot`** if you want to have control over the design, and use **`plotly`** for easier and better interactivity. You can still control the design if you use native **`ggplot`** objects.
:::

## üìà Performing Visual Statistical Analysis 

### Using `ggstatsplot::ggbetweenstats()` 

```{r}
ggbetweenstats(
  data = exam_data,
  x = GENDER,
  y = MATHS,
  type = "p",
  messages = FALSE
)
```

As shown above we can observe the sample means represented by the red dot and labelled accordingly. We can also observe that Welch test was also performed with a p-value of 0.53. List of statistical tests can be found [here](https://indrajeetpatil.github.io/statsExpressions/ "{statsExpressions}: Tidy dataframes and expressions with statistical details").

### Using `ggstatsplot::gscatterstats()` 

```{r}
ggscatterstats(
  data = exam_data,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
)
```

### Loading an Excel file into the R environment

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", "data")
```

### Creating a multiple regression model using `lm()`

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

### Performing diagnostic tests

#### Checking for multicolinearity

```{r}
check_collinearity(model)
```

```{r}
check_c <- check_collinearity(model)

plot(check_c)
```

Any VIF over 10, means that there are variables that are highly collinear.

#### Checking normaliy assumption

```{r}
check_n <- check_normality(model)

plot(check_n)
```

#### Checking EVERYTHING in one go

```{r}
check_model(model)
```

## ‚ùì Visualizing Uncertainty

### Visualizing the uncertainty of point estimates

```{r}
my_sum <- exam_data %>% 
  group_by(RACE) %>%
  summarise(
    n = n(),
    mean = mean(MATHS),
    sd = sd(MATHS)
    ) %>%
  mutate(se = sd/sqrt(n-1))
```

#### Using `ggplot`

```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x = RACE, 
        ymin = mean-se, 
        ymax = mean+se), 
    width = 0.2, 
    colour = "black", 
    alpha = 0.9, 
    size = 0.5) +
  geom_point(aes
           (x = RACE, 
            y = mean), 
           stat = "identity", 
           color = "red",
           size = 1.5,
           alpha = 1) +
  ggtitle("Standard error of MEAN MATHS score by RACE")
```

::: {.callout-note icon="false"}
## üîç OBSERVATION

There was no need to mention *exam_data* in the code block above because all the data is already in *my_sum*.
:::
